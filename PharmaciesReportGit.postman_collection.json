{
	"info": {
		"_postman_id": "046bf297-bfa4-473c-becd-31c5dbf998aa",
		"name": "PharmaciesReportGit",
		"description": "Pharmacies",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Test",
			"item": [
				{
					"name": "Test pharmacy",
					"item": [
						{
							"name": "User login super-admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5bc25b54-2a2b-408e-8a7a-e69f492f760b",
										"exec": [
											"pm.environment.set(\"token_user\", pm.response.json().data.token);\r",
											"pm.environment.set(\"uuid_user\", pm.response.json().data.item.uuid);\r",
											"pm.environment.set(\"refreshToken_user\", pm.response.json().data.refreshToken);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"super-admin@example.com\",\n    \"password\": \"pw1234\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/user/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"user",
										"login"
									]
								},
								"description": "User login."
							},
							"response": [
								{
									"name": "Not found",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\": \"<string>\",\n    \"password\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/user/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"user",
												"login"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returns if authentication failing",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\": \"<string>\",\n    \"password\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/user/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"user",
												"login"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returns tokens and user",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\": \"<string>\",\n    \"password\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/user/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"user",
												"login"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returns if request parameters is not valid",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\": \"<string>\",\n    \"password\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/user/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"user",
												"login"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Creating Pharmacy.",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "19570dc0-5fc6-44c7-b6b5-0e6e14a0f36a",
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"//pm.environment.set(\"pharmacyPrId\", pm.response.json().data.item.id);\r",
											"pm.environment.set(\"PharmaIdCr\", pm.response.json().data.item.id);\r",
											"\r",
											"pm.environment.set(\"RegionId\", pm.response.json().data.item.region.id);\r",
											"\r",
											"pm.test(\"isEnabled=true\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data.item.isEnabled).to.eql(true);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b84e943c-9978-4455-bb44-d72b33024978",
										"exec": [
											"pm.environment.set(\"random_phone\", _.random(10000000000, 90000000000));\r",
											"pm.environment.set(\"random_phone2\", _.random(100000000000, 900000000000));\r",
											"var phn = [pm.environment.get(\"random_phone\"),pm.environment.get(\"random_phone2\"),];\r",
											"var shuffle = _.shuffle(phn);\r",
											"pm.environment.set(\"rphone\", shuffle[0]);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token_user}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"description": "Value: Bearer {jwt}",
										"key": "Authorization",
										"value": ""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"{{$randomProductName}}\",\n  \"phone\": \"{{rphone}}\",\n  \"regionId\": 6,\n  \"location\": {\n    \"lat\": 0,\n    \"lng\": 0,\n    \"address\": \"ул. Ньютона, 103\"\n  },\n  \"logoUuid\": \"\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/user/pharmacy",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"user",
										"pharmacy"
									]
								},
								"description": "Creating Pharmacy."
							},
							"response": [
								{
									"name": "Pharmacy created",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"phone\": \"<string>\",\n    \"regionId\": \"<integer>\",\n    \"location\": {\n        \"latitude\": \"<number>\",\n        \"longitude\": \"<number>\",\n        \"address\": \"<string>\"\n    },\n    \"logoUuid\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/user/pharmacy",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"user",
												"pharmacy"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Invalid input",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"phone\": \"<string>\",\n    \"regionId\": \"<integer>\",\n    \"location\": {\n        \"latitude\": \"<number>\",\n        \"longitude\": \"<number>\",\n        \"address\": \"<string>\"\n    },\n    \"logoUuid\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/user/pharmacy",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"user",
												"pharmacy"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Retrieving Pharmacy data.",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e7ec7fca-ed68-4236-a630-254c0bd794c2",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"isEnabled=true\", function () {\r",
											"        pm.expect(jsonData.data.item.isEnabled).to.eql(true);\r",
											"});\r",
											"pm.test(\"regionId=6\", function () {\r",
											"        pm.expect(jsonData.data.item.region.id).to.eql(6);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token_user}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"description": "Value: Bearer {jwt}",
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/user/pharmacy/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"user",
										"pharmacy",
										":id"
									],
									"variable": [
										{
											"id": "f240aaa3-dc4f-44f3-93e8-e611ccb5be18",
											"key": "id",
											"value": "{{PharmaIdCr}}",
											"type": "string"
										}
									]
								},
								"description": "Retrieving Pharmacy data."
							},
							"response": [
								{
									"name": "Invalid input",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/user/pharmacy/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"user",
												"pharmacy",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Not found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/user/pharmacy/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"user",
												"pharmacy",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Pharmacy information",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/user/pharmacy/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"user",
												"pharmacy",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Uploading_User_image_file.",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "77012d4c-1de6-4543-b9a8-ad0e53b97da0",
										"exec": [
											"pm.environment.set(\"imglogo\", pm.response.json().data.item.uuid);\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token_user}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "/D:/ProjecTs/Pharma/IMG Pharma/Pharmacy.png"
										},
										{
											"key": "",
											"value": "",
											"type": "text",
											"disabled": true
										}
									],
									"options": {
										"formdata": {}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/user/image",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"user",
										"image"
									]
								}
							},
							"response": []
						},
						{
							"name": "Editing Pharmacy.",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eff46e49-5ca6-43a7-a5c9-bb74c47aaddd",
										"exec": [
											"pm.environment.set(\"random_phone\", _.random(10000000000, 90000000000));\r",
											"pm.environment.set(\"random_phone2\", _.random(100000000000, 900000000000));\r",
											"var phn = [pm.environment.get(\"random_phone\"),pm.environment.get(\"random_phone2\"),];\r",
											"var shuffle = _.shuffle(phn);\r",
											"pm.environment.set(\"rphone\", shuffle[0]);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "2ba476db-6fbc-47b9-b2f9-c9f15a6bd8a5",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token_user}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"description": "Value: Bearer {jwt}",
										"key": "Authorization",
										"value": ""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"{{$randomProductName}}\",\n  \"phone\": \"{{rphone}}\",\n  \"regionId\": 4,\n  \"location\": {\n    \"lat\": 0,\n    \"lng\": 0,\n    \"address\": \"ул. Калатушкина, 666\"\n  },\n  \"logoUuid\": \"{{imglogo}}\"\n           \n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/user/pharmacy/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"user",
										"pharmacy",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{PharmaIdCr}}",
											"type": "string",
											"description": "(Required) "
										}
									]
								},
								"description": "Editing Pharmacy."
							},
							"response": [
								{
									"name": "Pharmacy edited",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"phone\": \"<string>\",\n    \"regionId\": \"<integer>\",\n    \"location\": {\n        \"latitude\": \"<number>\",\n        \"longitude\": \"<number>\",\n        \"address\": \"<string>\"\n    },\n    \"logoUuid\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/user/pharmacy/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"user",
												"pharmacy",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Invalid input",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"phone\": \"<string>\",\n    \"regionId\": \"<integer>\",\n    \"location\": {\n        \"latitude\": \"<number>\",\n        \"longitude\": \"<number>\",\n        \"address\": \"<string>\"\n    },\n    \"logoUuid\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/user/pharmacy/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"user",
												"pharmacy",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Retrieving Pharmacy data. Сhange",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ab03b84b-284e-490e-879d-8eee521e2372",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"regionId=4\", function () {\r",
											"        pm.expect(jsonData.data.item.region.id).to.eql(4);\r",
											"});\r",
											"\r",
											"pm.test(\"isEnabled=true\", function () {\r",
											"       pm.expect(jsonData.data.item.isEnabled).to.eql(true);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token_user}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"description": "Value: Bearer {jwt}",
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/user/pharmacy/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"user",
										"pharmacy",
										":id"
									],
									"variable": [
										{
											"id": "cd95a8f6-3c65-4866-a187-905b9cee6635",
											"key": "id",
											"value": "{{PharmaIdCr}}",
											"type": "string"
										}
									]
								},
								"description": "Retrieving Pharmacy data."
							},
							"response": [
								{
									"name": "Not found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/user/pharmacy/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"user",
												"pharmacy",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Invalid input",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/user/pharmacy/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"user",
												"pharmacy",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Pharmacy information",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/user/pharmacy/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"user",
												"pharmacy",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Retrieving collection of Pharmacy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d6af462e-455f-4120-93e9-3abf1343a8ab",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"const pharma = jsonData.data.items.find(u => u.id === parseInt(pm.environment.get(\"PharmaIdCr\")));\r",
											"const pharmaid = pharma ? pharma.id : 'not found';\r",
											"\r",
											"console.log(pharma);\r",
											"console.log(pharmaid);\r",
											"\r",
											"pm.test(\"Compare pharma_id\", function () {\r",
											"    pm.expect(pharmaid).to.eql(parseInt(pm.environment.get(\"PharmaIdCr\")));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token_user}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"description": "Value: Bearer {jwt}",
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/user/pharmacies",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"user",
										"pharmacies"
									],
									"query": [
										{
											"key": "order[id]",
											"value": "asc",
											"disabled": true
										},
										{
											"key": "order[name]",
											"value": "<string>",
											"disabled": true
										},
										{
											"key": "order[address]",
											"value": "<string>",
											"disabled": true
										},
										{
											"key": "order[user_count]",
											"value": "<string>",
											"disabled": true
										},
										{
											"key": "id",
											"value": "19",
											"description": "id",
											"disabled": true
										},
										{
											"key": "name",
											"value": "Pharmacy asd3",
											"description": "Pharmacy name",
											"disabled": true
										},
										{
											"key": "address",
											"value": "ул. Ньютона",
											"description": "Pharmacy address",
											"disabled": true
										},
										{
											"key": "phone_number",
											"value": "63740984315",
											"description": "Pharmacy phone number",
											"disabled": true
										},
										{
											"key": "enterprise_admin",
											"value": "",
											"description": "Pharmacy enterprise admin name",
											"disabled": true
										},
										{
											"key": "page",
											"value": "1",
											"description": "Page number",
											"disabled": true
										},
										{
											"key": "per_page",
											"value": "12",
											"description": "Page items count",
											"disabled": true
										}
									]
								},
								"description": "Retrieving collection of Pharmacy."
							},
							"response": [
								{
									"name": "Pharmacies list",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/user/pharmacies?order[id]=<string>&order[name]=<string>&order[address]=<string>&order[user_count]=<string>&id=<integer>&name=<string>&address=<string>&phone_number=<string>&enterprise_admin=<string>&page=<integer>&per_page=<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"user",
												"pharmacies"
											],
											"query": [
												{
													"key": "order[id]",
													"value": "<string>"
												},
												{
													"key": "order[name]",
													"value": "<string>"
												},
												{
													"key": "order[address]",
													"value": "<string>"
												},
												{
													"key": "order[user_count]",
													"value": "<string>"
												},
												{
													"key": "id",
													"value": "<integer>"
												},
												{
													"key": "name",
													"value": "<string>"
												},
												{
													"key": "address",
													"value": "<string>"
												},
												{
													"key": "phone_number",
													"value": "<string>"
												},
												{
													"key": "enterprise_admin",
													"value": "<string>"
												},
												{
													"key": "page",
													"value": "<integer>"
												},
												{
													"key": "per_page",
													"value": "<integer>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Invalid input",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/user/pharmacies?order[id]=<string>&order[name]=<string>&order[address]=<string>&order[user_count]=<string>&id=<integer>&name=<string>&address=<string>&phone_number=<string>&enterprise_admin=<string>&page=<integer>&per_page=<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"user",
												"pharmacies"
											],
											"query": [
												{
													"key": "order[id]",
													"value": "<string>"
												},
												{
													"key": "order[name]",
													"value": "<string>"
												},
												{
													"key": "order[address]",
													"value": "<string>"
												},
												{
													"key": "order[user_count]",
													"value": "<string>"
												},
												{
													"key": "id",
													"value": "<integer>"
												},
												{
													"key": "name",
													"value": "<string>"
												},
												{
													"key": "address",
													"value": "<string>"
												},
												{
													"key": "phone_number",
													"value": "<string>"
												},
												{
													"key": "enterprise_admin",
													"value": "<string>"
												},
												{
													"key": "page",
													"value": "<integer>"
												},
												{
													"key": "per_page",
													"value": "<integer>"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "User registration. EnterpriseAdmin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ef32fd9d-0d49-4d3e-8ab7-77e508516fd5",
										"exec": [
											"pm.environment.set(\"email_EnterpriseAdmin\", pm.response.json().data.item.email);\r",
											"pm.environment.set(\"EnterpriseAdmin_id\", pm.response.json().data.item.id);\r",
											"\r",
											"\r",
											"//enterprise_admin\r",
											"//manager\r",
											"//enterprise_manager\r",
											"//doctor\r",
											"//courier"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token_user}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"description": "Value: Bearer {jwt}",
										"key": "Authorization",
										"value": ""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"firstName\": \"{{$randomFirstName}}\",\n\"lastName\": \"{{$randomLastName}}\",\n\"email\": \"{{$randomEmail}}\",\n\"password\": \"{{password}}\",\n\"type\": \"enterprise_manager\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/user/registration/type/:type",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"user",
										"registration",
										"type",
										":type"
									],
									"variable": [
										{
											"id": "14c098cb-3c98-4143-b46b-7a4a72bc838f",
											"key": "type",
											"value": "enterprise_manager",
											"type": "string",
											"description": "(Required) user type"
										}
									]
								},
								"description": "Creating User."
							},
							"response": [
								{
									"name": "User information",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"<string>\",\n    \"fullName\": \"<string>\",\n    \"email\": \"<string>\",\n    \"password\": \"<string>\",\n    \"type\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/user/registration/type/:type",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"user",
												"registration",
												"type",
												":type"
											],
											"variable": [
												{
													"key": "type"
												}
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Invalid input",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"<string>\",\n    \"fullName\": \"<string>\",\n    \"email\": \"<string>\",\n    \"password\": \"<string>\",\n    \"type\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/user/registration/type/:type",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"user",
												"registration",
												"type",
												":type"
											],
											"variable": [
												{
													"key": "type"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Add User to Pharmacy.",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a1af1d23-ed0d-4e1f-ac9e-70c92162f5f9",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token_user}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"description": "Value: Bearer {jwt}",
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/user/pharmacy/:id/add-user/:userEmail",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"user",
										"pharmacy",
										":id",
										"add-user",
										":userEmail"
									],
									"variable": [
										{
											"id": "c2fbb391-4c6f-4a69-abf3-ed158db3e276",
											"key": "id",
											"value": "{{PharmaIdCr}}",
											"type": "string",
											"description": "(Required) "
										},
										{
											"id": "1b96d69f-4f51-4e94-aab7-bd29be917ffa",
											"key": "userEmail",
											"value": "{{email_EnterpriseAdmin}}",
											"type": "string"
										}
									]
								},
								"description": "Add User to Pharmacy."
							},
							"response": [
								{
									"name": "Invalid input",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/user/pharmacy/:id/add-user/:userId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"user",
												"pharmacy",
												":id",
												"add-user",
												":userId"
											],
											"variable": [
												{
													"key": "id"
												},
												{
													"key": "userId"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "User added to Pharmacy",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/user/pharmacy/:id/add-user/:userId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"user",
												"pharmacy",
												":id",
												"add-user",
												":userId"
											],
											"variable": [
												{
													"key": "id"
												},
												{
													"key": "userId"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Not found",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/user/pharmacy/:id/add-user/:userId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"user",
												"pharmacy",
												":id",
												"add-user",
												":userId"
											],
											"variable": [
												{
													"key": "id"
												},
												{
													"key": "userId"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Retrieving Pharmacy users.",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "33af7a54-4f92-4cc5-873b-7f0e96d5ae32",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Compare EnterpriseAdmin_id \", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data.items[0].id).to.eql(parseInt(pm.environment.get(\"EnterpriseAdmin_id\")));\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token_user}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/user/pharmacy/:id/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"user",
										"pharmacy",
										":id",
										"users"
									],
									"variable": [
										{
											"id": "ec803f8d-8ed0-4452-b7c8-c3d92a7c7175",
											"key": "id",
											"value": "{{PharmaIdCr}}",
											"type": "string"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove User from Pharmacy.",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token_user}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"description": "Value: Bearer {jwt}",
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/user/pharmacy/:id/remove-user/:userEmail",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"user",
										"pharmacy",
										":id",
										"remove-user",
										":userEmail"
									],
									"variable": [
										{
											"id": "d0435da7-5c63-452d-ba5b-19b5e6e42107",
											"key": "id",
											"value": "{{PharmaIdCr}}",
											"type": "string",
											"description": "(Required) "
										},
										{
											"id": "9795cda9-8fdc-42d9-88bd-495db1718552",
											"key": "userEmail",
											"value": "{{email_EnterpriseAdmin}}",
											"type": "string"
										}
									]
								},
								"description": "Remove User from Pharmacy."
							},
							"response": [
								{
									"name": "Not found",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/user/pharmacy/:id/remove-user/:userId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"user",
												"pharmacy",
												":id",
												"remove-user",
												":userId"
											],
											"variable": [
												{
													"key": "id"
												},
												{
													"key": "userId"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Invalid input",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/user/pharmacy/:id/remove-user/:userId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"user",
												"pharmacy",
												":id",
												"remove-user",
												":userId"
											],
											"variable": [
												{
													"key": "id"
												},
												{
													"key": "userId"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "User removed from pharmacy",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/user/pharmacy/:id/remove-user/:userId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"user",
												"pharmacy",
												":id",
												"remove-user",
												":userId"
											],
											"variable": [
												{
													"key": "id"
												},
												{
													"key": "userId"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Retrieving Pharmacy users. List empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "57729a3d-1c17-48ca-90d2-f5ce9468c009",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Сart is empty\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var res = (_.isEmpty(jsonData.data.items));\r",
											"    pm.expect(res).to.be.true\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token_user}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/user/pharmacy/:id/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"user",
										"pharmacy",
										":id",
										"users"
									],
									"variable": [
										{
											"id": "ec10012a-3c31-4e2d-8899-6bb517ede263",
											"key": "id",
											"value": "{{PharmaIdCr}}",
											"type": "string"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Creating Pharmacy product. Required fields Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4544f113-a1c5-4996-a7f0-9e7626da22af",
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.environment.set(\"pharmacyPrIdNReq\", pm.response.json().data.item.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token_user}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"globalProductId\": null,\r\n  \"price\": 2,\r\n  \"count\": 14,\r\n  \"isEnabled\": true,\r\n  \"isApproved\": true,\r\n  \"rusName\": \"ДЕПАКИН<SUP>&reg;</SUP> ХРОНО\",\r\n  \"engName\": \"\",\r\n  \"releaseForm\": \"таблетки 300 мг: 100 шт.\",\r\n  \"registrationDate\": \"{{date}}\",\r\n  \"registrationNumber\": \"sacasc234\",\r\n  \"description\": \"Test\",\r\n  \"categoryAtcCode\": \"N03AG01\",\r\n  \"fgtCode\": null,\r\n  \"pictureUuids\": [\r\n    \r\n    ],\r\n  \"barCodes\": [\r\n    \r\n  ],\r\n  \"activeSubstances\": [\r\n   \r\n  ],\r\n  \"kfgCodes\": [\r\n    \r\n  ],\r\n  \"nozologyCodes\": [\r\n    \r\n  ],\r\n  \"manufacturerName\": \"SANOFI WINTHROP INDUSTRIE\",\r\n  \"manufacturerCountry\": 9,\r\n  \"rusNameIsCustom\": true,\r\n  \"engNameIsCustom\": true,\r\n  \"barCodesIsCustom\": true,\r\n  \"activeSubstancesIsCustom\": true,\r\n  \"nozologiesIsCustom\": true,\r\n  \"kfgsIsCustom\": true,\r\n  \"releaseFormIsCustom\": true,\r\n  \"registrationDateIsCustom\": true,\r\n  \"registrationNumberIsCustom\": true,\r\n  \"descriptionIsCustom\": true,\r\n  \"categoryIsCustom\": true,\r\n  \"fgtIsCustom\": true,\r\n  \"picturesIsCustom\": true,\r\n  \"manufacturerIsCustom\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/user/pharmacy/:id/pharmacy-product",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"user",
										"pharmacy",
										":id",
										"pharmacy-product"
									],
									"variable": [
										{
											"id": "a16e94ce-499c-4a41-9400-d3091807738e",
											"key": "id",
											"value": "{{PharmaIdCr}}",
											"type": "string"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieving Pharmacy products.",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "20a2f595-657b-4857-ba0f-9f642e44c592",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Compare global-product_id\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data.items[0].pharmacyProductId).to.eql(parseInt(pm.environment.get(\"pharmacyPrIdNReq\")));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token_user}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/user/pharmacy/:id/products",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"user",
										"pharmacy",
										":id",
										"products"
									],
									"variable": [
										{
											"id": "282fcae7-851d-4d2d-a067-fec87026a061",
											"key": "id",
											"value": "{{PharmaIdCr}}",
											"type": "string"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Close Pharmacy.",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b56b9d63-7fcd-45a8-a4a1-3c79d1768b7b",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token_user}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"description": "Value: Bearer {jwt}",
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/user/pharmacy/:id/close",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"user",
										"pharmacy",
										":id",
										"close"
									],
									"variable": [
										{
											"id": "148325ed-2148-4593-afa0-a626102c1997",
											"key": "id",
											"value": "{{PharmaIdCr}}",
											"type": "string",
											"description": "(Required) "
										}
									]
								},
								"description": "Close Pharmacy."
							},
							"response": [
								{
									"name": "Invalid input",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/user/pharmacy/:id/close",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"user",
												"pharmacy",
												":id",
												"close"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Pharmacy closed",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/user/pharmacy/:id/close",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"user",
												"pharmacy",
												":id",
												"close"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Not found",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/user/pharmacy/:id/close",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"user",
												"pharmacy",
												":id",
												"close"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Retrieving Pharmacy data. isEnabled=false",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "beddd320-158f-4042-b326-850b1806b673",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"isEnabled=false\", function () {\r",
											"        pm.expect(jsonData.data.item.isEnabled).to.eql(false);\r",
											"});\r",
											"pm.test(\"regionId=4\", function () {\r",
											"        pm.expect(jsonData.data.item.region.id).to.eql(4);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token_user}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"description": "Value: Bearer {jwt}",
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/user/pharmacy/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"user",
										"pharmacy",
										":id"
									],
									"variable": [
										{
											"id": "42942a8d-123c-4e7f-8b11-8b203f0f44d9",
											"key": "id",
											"value": "{{PharmaIdCr}}",
											"type": "string"
										}
									]
								},
								"description": "Retrieving Pharmacy data."
							},
							"response": [
								{
									"name": "Pharmacy information",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/user/pharmacy/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"user",
												"pharmacy",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Not found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/user/pharmacy/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"user",
												"pharmacy",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Invalid input",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/user/pharmacy/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"user",
												"pharmacy",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Open Pharmacy.",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a6caa9f4-ab5a-4979-a0fd-ca7d55ad1d96",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token_user}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"description": "Value: Bearer {jwt}",
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/user/pharmacy/:id/open",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"user",
										"pharmacy",
										":id",
										"open"
									],
									"variable": [
										{
											"id": "8fbc4d72-2d21-4da9-b10b-28951c60ab3a",
											"key": "id",
											"value": "{{PharmaIdCr}}",
											"type": "string",
											"description": "(Required) "
										}
									]
								},
								"description": "Open Pharmacy."
							},
							"response": [
								{
									"name": "Invalid input",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/user/pharmacy/:id/open",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"user",
												"pharmacy",
												":id",
												"open"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Not found",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/user/pharmacy/:id/open",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"user",
												"pharmacy",
												":id",
												"open"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Pharmacy opened",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/user/pharmacy/:id/open",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"user",
												"pharmacy",
												":id",
												"open"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Retrieving Pharmacy data. isEnabled=true",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c9a34fce-b071-4cf9-a64b-eb7c47de3ba3",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"isEnabled=true\", function () {\r",
											"        pm.expect(jsonData.data.item.isEnabled).to.eql(true);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token_user}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"description": "Value: Bearer {jwt}",
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/user/pharmacy/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"user",
										"pharmacy",
										":id"
									],
									"variable": [
										{
											"id": "746bcd16-41e5-468d-828b-ffe0987dba12",
											"key": "id",
											"value": "{{PharmaIdCr}}",
											"type": "string"
										}
									]
								},
								"description": "Retrieving Pharmacy data."
							},
							"response": [
								{
									"name": "Invalid input",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/user/pharmacy/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"user",
												"pharmacy",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Pharmacy information",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/user/pharmacy/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"user",
												"pharmacy",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Not found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/user/pharmacy/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"user",
												"pharmacy",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Retrieving Pharmacy products.",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "006e28b5-0ced-4c16-ae91-9b20ef777248",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token_user}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/user/pharmacy/:id/products",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"user",
										"pharmacy",
										":id",
										"products"
									],
									"variable": [
										{
											"id": "6c377875-7de7-47a9-9dc3-efecaaacad9e",
											"key": "id",
											"value": "{{PharmaIdCr}}",
											"type": "string"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Test User",
					"item": [
						{
							"name": "Pharmacist",
							"item": [
								{
									"name": "User login super-admin",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a45123ed-edf4-4989-9d9a-1d8b74334630",
												"exec": [
													"pm.environment.set(\"token_super_admin\", pm.response.json().data.token);\r",
													"pm.environment.set(\"uuid_user\", pm.response.json().data.item.uuid);\r",
													"pm.environment.set(\"refreshToken_user\", pm.response.json().data.refreshToken);\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\": \"super-admin@example.com\",\n    \"password\": \"pw1234\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/user/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"user",
												"login"
											]
										},
										"description": "User login."
									},
									"response": [
										{
											"name": "Returns tokens and user",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"email\": \"<string>\",\n    \"password\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v1/user/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"user",
														"login"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "*/*"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returns if request parameters is not valid",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"email\": \"<string>\",\n    \"password\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v1/user/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"user",
														"login"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "*/*"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returns if authentication failing",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"email\": \"<string>\",\n    \"password\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v1/user/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"user",
														"login"
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "*/*"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Not found",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"email\": \"<string>\",\n    \"password\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v1/user/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"user",
														"login"
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "*/*"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "User registration. Pharmacist",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7317f220-870c-42ce-924b-ac8c8f11e545",
												"exec": [
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"pm.environment.set(\"email_pharmacist\", pm.response.json().data.item.email);\r",
													"pm.environment.set(\"uuid_pharmacist\", pm.response.json().data.item.uuid);\r",
													"\r",
													"//enterprise_admin\r",
													"//manager\r",
													"//enterprise_manager\r",
													"//doctor\r",
													"//courier"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "94e9bc11-6e85-4523-9378-7caa2d1975ee",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token_super_admin}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"description": "Value: Bearer {jwt}",
												"key": "Authorization",
												"value": ""
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\"firstName\": \"{{$randomFirstName}}\",\n\"lastName\": \"{{$randomLastName}}\",\n\"email\": \"{{$randomEmail}}\",\n\"password\": \"{{password}}\",\n\"type\": \"pharmacist\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/user/registration/type/:type",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"user",
												"registration",
												"type",
												":type"
											],
											"variable": [
												{
													"id": "8b57b5ea-1252-4be5-bda8-9ac55155c006",
													"key": "type",
													"value": "pharmacist",
													"type": "string",
													"description": "(Required) user type"
												}
											]
										},
										"description": "Creating User."
									},
									"response": [
										{
											"name": "Invalid input",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\": \"<string>\",\n    \"fullName\": \"<string>\",\n    \"email\": \"<string>\",\n    \"password\": \"<string>\",\n    \"type\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v1/user/registration/type/:type",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"user",
														"registration",
														"type",
														":type"
													],
													"variable": [
														{
															"key": "type"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "*/*"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "User information",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\": \"<string>\",\n    \"fullName\": \"<string>\",\n    \"email\": \"<string>\",\n    \"password\": \"<string>\",\n    \"type\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v1/user/registration/type/:type",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"user",
														"registration",
														"type",
														":type"
													],
													"variable": [
														{
															"key": "type"
														}
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "*/*"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "User login Pharmacist",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "da2db075-3cb8-45d6-93ce-dfbddb5b1ce9",
												"exec": [
													"pm.environment.set(\"token_pharmacist\", pm.response.json().data.token);\r",
													"pm.environment.set(\"id_pharmacist\", pm.response.json().data.item.id);\r",
													"pm.environment.set(\"uuid_pharmacist\", pm.response.json().data.item.uuid);\r",
													"pm.environment.set(\"email_pharmacist\", pm.response.json().data.item.email);\r",
													"\r",
													"//pm.environment.set(\"refreshToken_user\", pm.response.json().data.refreshToken);\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\": \"{{email_pharmacist}}\",\n    \"password\": \"{{password}}\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/user/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"user",
												"login"
											]
										},
										"description": "User login."
									},
									"response": [
										{
											"name": "Returns if authentication failing",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"email\": \"<string>\",\n    \"password\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v1/user/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"user",
														"login"
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "*/*"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Not found",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"email\": \"<string>\",\n    \"password\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v1/user/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"user",
														"login"
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "*/*"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returns if request parameters is not valid",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"email\": \"<string>\",\n    \"password\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v1/user/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"user",
														"login"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "*/*"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returns tokens and user",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"email\": \"<string>\",\n    \"password\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v1/user/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"user",
														"login"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "*/*"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Uploading_User_image_file.",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7825298a-226b-4fa3-b568-63b334d38bd9",
												"exec": [
													"pm.environment.set(\"UserAva\", pm.response.json().data.item.uuid);\r",
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token_pharmacist}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "file",
													"type": "file",
													"src": "/D:/ProjecTs/Pharma/IMG Pharma/20190214174624-8569.png"
												},
												{
													"key": "",
													"value": "",
													"type": "text",
													"disabled": true
												}
											],
											"options": {
												"formdata": {}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/user/image",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"user",
												"image"
											]
										}
									},
									"response": []
								},
								{
									"name": "Updating User data.Pharmacist",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "647e7284-b6a6-4c22-b2ab-19e1510d4603",
												"exec": [
													"pm.environment.set(\"random_phone\", _.random(10000000000, 90000000000));\r",
													"pm.environment.set(\"random_phone2\", _.random(100000000000, 900000000000));\r",
													"var phn = [pm.environment.get(\"random_phone\"),pm.environment.get(\"random_phone2\"),];\r",
													"var shuffle = _.shuffle(phn);\r",
													"pm.environment.set(\"rphone\", shuffle[0]);\r",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "52de0d40-ddbf-41d0-86f3-aa6dfb336a83",
												"exec": [
													"pm.environment.set(\"email_pharmacist\", pm.response.json().data.item.email);\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"console.log(pm.environment.get(\"rphone\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token_pharmacist}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"phone\": \"{{rphone}}\",\r\n  \"aboutMe\": \"{{$randomPhrase}}\",\r\n  \"avatarUuid\": \"{{UserAva}}\",\r\n  \"firstName\": \"{{$randomFirstName}}\",\r\n  \"lastName\": \"{{$randomLastName}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"password\": \"{{password}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/user/user/:uuid",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"user",
												"user",
												":uuid"
											],
											"variable": [
												{
													"id": "2192c2f8-6f02-4189-a608-d0222e749407",
													"key": "uuid",
													"value": "{{uuid_pharmacist}}",
													"type": "string"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "User login Pharmacist Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "12d1d8d6-d70b-4097-ae5e-944c77abcc41",
												"exec": [
													"pm.environment.set(\"token_pharmacist\", pm.response.json().data.token);\r",
													"pm.environment.set(\"id_pharmacist\", pm.response.json().data.item.id);\r",
													"pm.environment.set(\"uuid_pharmacist\", pm.response.json().data.item.uuid);\r",
													"pm.environment.set(\"email_pharmacist\", pm.response.json().data.item.email);\r",
													"\r",
													"//pm.environment.set(\"refreshToken_user\", pm.response.json().data.refreshToken);\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\": \"{{email_pharmacist}}\",\n    \"password\": \"{{password}}\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/user/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"user",
												"login"
											]
										},
										"description": "User login."
									},
									"response": [
										{
											"name": "Not found",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"email\": \"<string>\",\n    \"password\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v1/user/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"user",
														"login"
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "*/*"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returns if request parameters is not valid",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"email\": \"<string>\",\n    \"password\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v1/user/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"user",
														"login"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "*/*"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returns tokens and user",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"email\": \"<string>\",\n    \"password\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v1/user/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"user",
														"login"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "*/*"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returns if authentication failing",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"email\": \"<string>\",\n    \"password\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v1/user/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"user",
														"login"
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "*/*"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "self User",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5813f2f0-f40e-4aae-a9fb-fae55fdcb78a",
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Compare avatar\", function () {\r",
													"    pm.expect(jsonData.data.item.avatar.uuid).to.eql(pm.environment.get(\"UserAva\"));\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token_pharmacist}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/user/user",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"user",
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Retrieving User data by uuid.",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c380843b-5e5d-4923-9474-446f54f2fc0d",
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Compare avatar\", function () {\r",
													"    pm.expect(jsonData.data.item.avatar.uuid).to.eql(pm.environment.get(\"UserAva\"));\r",
													"});\r",
													"pm.test(\"Compare email\", function () {\r",
													"    pm.expect(jsonData.data.item.email).to.eql(pm.environment.get(\"email_pharmacist\"));\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token_super_admin}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/user/user/:uuid",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"user",
												"user",
												":uuid"
											],
											"variable": [
												{
													"id": "42ab80fc-35b5-4158-895d-4a83b07b6e6d",
													"key": "uuid",
													"value": "{{uuid_pharmacist}}",
													"type": "string"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Doctor",
							"item": [
								{
									"name": "User login super-admin",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "37a63f61-84a5-4195-8f73-5e9a95ae6777",
												"exec": [
													"pm.environment.set(\"token_super_admin\", pm.response.json().data.token);\r",
													"pm.environment.set(\"uuid_user\", pm.response.json().data.item.uuid);\r",
													"pm.environment.set(\"refreshToken_user\", pm.response.json().data.refreshToken);\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\": \"super-admin@example.com\",\n    \"password\": \"pw1234\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/user/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"user",
												"login"
											]
										},
										"description": "User login."
									},
									"response": [
										{
											"name": "Returns if request parameters is not valid",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"email\": \"<string>\",\n    \"password\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v1/user/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"user",
														"login"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "*/*"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returns tokens and user",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"email\": \"<string>\",\n    \"password\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v1/user/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"user",
														"login"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "*/*"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returns if authentication failing",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"email\": \"<string>\",\n    \"password\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v1/user/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"user",
														"login"
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "*/*"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Not found",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"email\": \"<string>\",\n    \"password\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v1/user/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"user",
														"login"
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "*/*"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "User registration. Doctor",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d2f5922d-2c4f-4793-9351-0ed259466dcc",
												"exec": [
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"pm.environment.set(\"email_doctor\", pm.response.json().data.item.email);\r",
													"pm.environment.set(\"uuid_doctor\", pm.response.json().data.item.uuid);\r",
													"\r",
													"//enterprise_admin\r",
													"//manager\r",
													"//enterprise_manager\r",
													"//doctor\r",
													"//courier"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token_super_admin}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"description": "Value: Bearer {jwt}",
												"key": "Authorization",
												"value": ""
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\"firstName\": \"{{$randomFirstName}}\",\n\"lastName\": \"{{$randomLastName}}\",\n\"email\": \"{{$randomEmail}}\",\n\"password\": \"{{password}}\",\n\"type\": \"doctor\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/user/registration/type/:type",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"user",
												"registration",
												"type",
												":type"
											],
											"variable": [
												{
													"id": "31183b72-4737-4dee-a587-b0dc344408ee",
													"key": "type",
													"value": "doctor",
													"type": "string",
													"description": "(Required) user type"
												}
											]
										},
										"description": "Creating User."
									},
									"response": [
										{
											"name": "Invalid input",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\": \"<string>\",\n    \"fullName\": \"<string>\",\n    \"email\": \"<string>\",\n    \"password\": \"<string>\",\n    \"type\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v1/user/registration/type/:type",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"user",
														"registration",
														"type",
														":type"
													],
													"variable": [
														{
															"key": "type"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "*/*"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "User information",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\": \"<string>\",\n    \"fullName\": \"<string>\",\n    \"email\": \"<string>\",\n    \"password\": \"<string>\",\n    \"type\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v1/user/registration/type/:type",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"user",
														"registration",
														"type",
														":type"
													],
													"variable": [
														{
															"key": "type"
														}
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "*/*"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "User login Doctor",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b9eab414-ce4a-4367-bebb-4542fbb7207b",
												"exec": [
													"pm.environment.set(\"token_doctor\", pm.response.json().data.token);\r",
													"pm.environment.set(\"id_doctor\", pm.response.json().data.item.id);\r",
													"pm.environment.set(\"uuid_doctor\", pm.response.json().data.item.uuid);\r",
													"pm.environment.set(\"email_doctor\", pm.response.json().data.item.email);\r",
													"\r",
													"//pm.environment.set(\"refreshToken_user\", pm.response.json().data.refreshToken);\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\": \"{{email_doctor}}\",\n    \"password\": \"{{password}}\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/user/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"user",
												"login"
											]
										},
										"description": "User login."
									},
									"response": [
										{
											"name": "Returns tokens and user",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"email\": \"<string>\",\n    \"password\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v1/user/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"user",
														"login"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "*/*"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returns if request parameters is not valid",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"email\": \"<string>\",\n    \"password\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v1/user/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"user",
														"login"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "*/*"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Not found",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"email\": \"<string>\",\n    \"password\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v1/user/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"user",
														"login"
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "*/*"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returns if authentication failing",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"email\": \"<string>\",\n    \"password\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v1/user/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"user",
														"login"
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "*/*"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Uploading_User_image_file.",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f04760ce-f459-423e-8f83-78d332546b32",
												"exec": [
													"pm.environment.set(\"UserAva\", pm.response.json().data.item.uuid);\r",
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token_doctor}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "file",
													"type": "file",
													"src": "/D:/ProjecTs/Pharma/IMG Pharma/unnamed.jpg"
												},
												{
													"key": "",
													"value": "",
													"type": "text",
													"disabled": true
												}
											],
											"options": {
												"formdata": {}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/user/image",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"user",
												"image"
											]
										}
									},
									"response": []
								},
								{
									"name": "Updating User data.Doctor",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "31acf5f8-5a5b-4d6a-87df-5f4e9463b6a2",
												"exec": [
													"pm.environment.set(\"random_phone\", _.random(10000000000, 90000000000));\r",
													"pm.environment.set(\"random_phone2\", _.random(100000000000, 900000000000));\r",
													"var phn = [pm.environment.get(\"random_phone\"),pm.environment.get(\"random_phone2\"),];\r",
													"var shuffle = _.shuffle(phn);\r",
													"pm.environment.set(\"rphone\", shuffle[0]);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "d4fd86b6-43b5-449c-a51a-ea2c960494c5",
												"exec": [
													"pm.environment.set(\"email_doctor\", pm.response.json().data.item.email);\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"console.log(pm.environment.get(\"rphone\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token_doctor}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"phone\": \"{{rphone}}\",\r\n  \"aboutMe\": \"{{$randomPhrase}}\",\r\n  \"avatarUuid\": \"{{UserAva}}\",\r\n  \"firstName\": \"{{$randomFirstName}}\",\r\n  \"lastName\": \"{{$randomLastName}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"password\": \"{{password}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/user/user/:uuid",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"user",
												"user",
												":uuid"
											],
											"variable": [
												{
													"id": "07c67005-2c53-4b7c-a9f7-c7a0dfbaa5a3",
													"key": "uuid",
													"value": "{{uuid_doctor}}",
													"type": "string"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "User login Doctor Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3e7d87f8-6692-439b-b063-b746d6b479fa",
												"exec": [
													"pm.environment.set(\"token_doctor\", pm.response.json().data.token);\r",
													"pm.environment.set(\"id_doctor\", pm.response.json().data.item.id);\r",
													"pm.environment.set(\"uuid_doctor\", pm.response.json().data.item.uuid);\r",
													"pm.environment.set(\"email_doctor\", pm.response.json().data.item.email);\r",
													"\r",
													"//pm.environment.set(\"refreshToken_user\", pm.response.json().data.refreshToken);\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\": \"{{email_doctor}}\",\n    \"password\": \"{{password}}\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/user/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"user",
												"login"
											]
										},
										"description": "User login."
									},
									"response": [
										{
											"name": "Returns if authentication failing",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"email\": \"<string>\",\n    \"password\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v1/user/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"user",
														"login"
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "*/*"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returns tokens and user",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"email\": \"<string>\",\n    \"password\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v1/user/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"user",
														"login"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "*/*"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Not found",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"email\": \"<string>\",\n    \"password\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v1/user/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"user",
														"login"
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "*/*"
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Returns if request parameters is not valid",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"email\": \"<string>\",\n    \"password\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/api/v1/user/login",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"api",
														"v1",
														"user",
														"login"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "*/*"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "self User",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7f1da635-e84c-4849-b8af-b3d646c8e0f9",
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Compare avatar\", function () {\r",
													"    pm.expect(jsonData.data.item.avatar.uuid).to.eql(pm.environment.get(\"UserAva\"));\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token_doctor}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/user/user",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"user",
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Retrieving User data by uuid.",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "82b31a5a-9708-4dac-a0bf-ec64e146fc50",
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Compare avatar\", function () {\r",
													"    pm.expect(jsonData.data.item.avatar.uuid).to.eql(pm.environment.get(\"UserAva\"));\r",
													"});\r",
													"pm.test(\"Compare email\", function () {\r",
													"    pm.expect(jsonData.data.item.email).to.eql(pm.environment.get(\"email_doctor\"));\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token_super_admin}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/user/user/:uuid",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"user",
												"user",
												":uuid"
											],
											"variable": [
												{
													"id": "6a6098b9-6733-4739-b9f7-202351628ae3",
													"key": "uuid",
													"value": "{{uuid_doctor}}",
													"type": "string"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Retrieving collection of Pharmacist data.",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bfb6fa40-26ec-4bc2-be1d-274a0d6e66c9",
										"exec": [
											"pm.environment.set(\"uuid_unk\", pm.response.json().data.items[0].uuid);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"const pharmacist = jsonData.data.items.find(u => u.email === pm.environment.get(\"email_pharmacist\"));\r",
											"const pharmacist_email = pharmacist ? pharmacist.email : 'not found';\r",
											"\r",
											"console.log(pharmacist);\r",
											"console.log(pharmacist_email);\r",
											"\r",
											"pm.test(\"Compare pharmacist_email\", function () {\r",
											"    pm.expect(pharmacist_email).to.eql(pm.environment.get(\"email_pharmacist\"));\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token_super_admin}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/user/pharmacists",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"user",
										"pharmacists"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieving collection of Doctor data.",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3e0b5e0c-dbe8-461f-b08e-2184c2081f69",
										"exec": [
											"pm.environment.set(\"uuid_unk\", pm.response.json().data.items[0].uuid);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"const doctor = jsonData.data.items.find(u => u.email === pm.environment.get(\"email_doctor\"));\r",
											"const email_doctor = doctor ? doctor.email : 'not found';\r",
											"\r",
											"console.log(doctor);\r",
											"console.log(email_doctor);\r",
											"\r",
											"pm.test(\"Compare doctor_email\", function () {\r",
											"    pm.expect(email_doctor).to.eql(pm.environment.get(\"email_doctor\"));\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token_super_admin}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/user/doctors",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"user",
										"doctors"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Test collection",
					"item": [
						{
							"name": "Customer registration.",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b5ddceb7-1023-4c44-abda-52b5fe6fb1fa",
										"exec": [
											"pm.environment.set(\"phone_customer\", pm.response.json().data.item.phone);\r",
											"pm.environment.set(\"custId\", pm.response.json().data.item.id);\r",
											"pm.environment.set(\"custName\", pm.response.json().data.item.name);\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f423e51e-849f-42fc-83cd-b14c7bee3bbb",
										"exec": [
											"pm.environment.set(\"random_phone\", _.random(10000000000, 90000000000));\r",
											"pm.environment.set(\"random_phone2\", _.random(100000000000, 900000000000));\r",
											"var phn = [pm.environment.get(\"random_phone\"),pm.environment.get(\"random_phone2\"),];\r",
											"var shuffle = _.shuffle(phn);\r",
											"pm.environment.set(\"rphone\", shuffle[0]);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"phone\": \"{{rphone}}\",\n\"name\": \"{{$randomUserName}}\",\n\"email\": \"{{$randomEmail}}\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/customer/registration",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"customer",
										"registration"
									]
								},
								"description": "Creating Customer, generating code for it and sending sms."
							},
							"response": [
								{
									"name": "Customer created and sent verification code",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"phone\": \"<string>\",\n    \"name\": \"<string>\",\n    \"email\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/customer/registration",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"customer",
												"registration"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Invalid input",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"phone\": \"<string>\",\n    \"name\": \"<string>\",\n    \"email\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/customer/registration",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"customer",
												"registration"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Retrieving collection of Customer data as user.",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0ef6ec84-1cad-48a3-9d52-e505d8f2a947",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"const idCust = jsonData.data.items.find(u => u.id === parseInt(pm.environment.get(\"custId\")));\r",
											"const idCust2 = idCust ? idCust.id : 'not found';\r",
											"console.log (idCust)\r",
											"\r",
											"pm.test(\"Compare customer_id\", function () {\r",
											"    pm.expect(idCust2).to.eql(parseInt(pm.environment.get(\"custId\")));\r",
											"});\r",
											"pm.test(\"Compare customer_name\", function () {\r",
											"    pm.expect(idCust.name).to.eql(pm.environment.get(\"custName\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token_user}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/user/customers",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"user",
										"customers"
									],
									"query": [
										{
											"key": "page",
											"value": "1",
											"disabled": true
										},
										{
											"key": "per_page",
											"value": "10",
											"disabled": true
										},
										{
											"key": "id",
											"value": "61",
											"disabled": true
										},
										{
											"key": "name",
											"value": "Lorna.Klein63",
											"disabled": true
										},
										{
											"key": "email",
											"value": "Blanche.OKon@hotmail.com",
											"disabled": true
										},
										{
											"key": "phone_number",
											"value": "258852677007",
											"disabled": true
										},
										{
											"key": "order[id]",
											"value": "desc",
											"disabled": true
										},
										{
											"key": "order[name]",
											"value": "desc",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Creating Global product. Full",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "85927ee1-548c-4e79-a1f1-83df76b0d557",
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.environment.set(\"IdNewGPPr\", pm.response.json().data.item.id);\r",
											"pm.environment.set(\"ruNameGlPr\", pm.response.json().data.item.rusName);\r",
											"console.log(pm.environment.get(\"date\"))\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9cb2b78d-09a4-4b2c-95a8-a39d4030f0d6",
										"exec": [
											"var min_day=1;\r",
											"var max_day=28;\r",
											"var min_mon=1; \r",
											"var max_mon=12;\r",
											"var min_year=1900; \r",
											"var max_year=2020;\r",
											"var random_day = Math.floor(Math.random() * (+max_day - +min_day)) + +min_day; \r",
											"var random_month = Math.floor(Math.random() * (+max_mon - +min_mon)) + +min_mon; \r",
											"var random_year = Math.floor(Math.random() * (+max_year - +min_year)) + +min_year; \r",
											"pm.environment.set(\"day\", random_day);\r",
											"pm.environment.set(\"month\", random_month);\r",
											"pm.environment.set(\"year\", random_year);\r",
											"var random_date = random_year  + \"-\" + random_month + \"-\" + random_day;\r",
											"pm.environment.set(\"date\", random_date);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"isEnabled\": true,\n    \"isApproved\": true,\n    \"rusName\": \"Цитрат калия\",\n    \"releaseForm\": \"таблетки 500 мг: 50 шт.\",\n    \"description\": \"противосудорожного препарата-стабилизатора центральной нервной системы. Для устранения приступов, а также улучшения общего психического состояния больного врач, основываясь на инструкции Вальпроком, подбирает дозировку средства и устанавливает индивидуальную схему лечения\",\n    \"categoryAtcCode\": \"N03AG01\",\n    \"manufacturerName\": \"SANOFI WINTHROP INDUSTRIE\",\n    \"manufacturerCountry\": 10,\n    \"prototypeProductId\": null,\n    \"engName\": \"VALPROCOM\",\n    \"registrationDate\": \"{{date}}\",\n    \"registrationNumber\": \"924\",\n    \"fgtCode\": \"04.005\",\n    \"pictureUuids\": [\n    \"{{pharmacyImage1}}\",\n    \"{{pharmacyImage2}}\",\n    \"{{pharmacyImage3}}\",\n    \"{{pharmacyImage4}}\",\n    \"{{pharmacyImage5}}\"\n       \n    ],\n    \"barCodes\": [\n        \"5995327206042\",\n        \"4260085520282\",\n        \"8901086130273\"\n    ],\n    \"activeSubstances\": [\n        \"sulfadoxine\",\n        \"tocopherol\",\n        \"triphosadenine\"\n    ],\n    \"kfgCodes\": [\n        \"04.05\",                  \n        \"29.02.01\"   \n    ],\n    \"nozologyCodes\": [\n        \"A54\",\n        \"A56\",\n        \"A69.1\"\n    ],\n    \"rusNameIsCustom\": true,\n    \"engNameIsCustom\": true,\n    \"barCodesIsCustom\": true,\n    \"activeSubstancesIsCustom\": true,\n    \"nozologiesIsCustom\": true,\n    \"kfgsIsCustom\": true,\n    \"releaseFormIsCustom\": true,\n    \"registrationDateIsCustom\": true,\n    \"registrationNumberIsCustom\": true,\n    \"descriptionIsCustom\": true,\n    \"categoryIsCustom\": true,\n    \"fgtIsCustom\": true,\n    \"picturesIsCustom\": true,\n    \"manufacturerIsCustom\": true\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/user/global-product",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"user",
										"global-product"
									]
								},
								"description": "Creating Global product."
							},
							"response": [
								{
									"name": "Global product created",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": {
													"content": "Added as a part of security scheme: apikey",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"isEnabled\": \"<boolean>\",\n    \"isApproved\": \"<boolean>\",\n    \"rusName\": \"<string>\",\n    \"releaseForm\": \"<string>\",\n    \"description\": \"<string>\",\n    \"categoryAtcCode\": \"<string>\",\n    \"manufacturerName\": \"<string>\",\n    \"manufacturerCountry\": \"<integer>\",\n    \"prototypeProductId\": \"<integer>\",\n    \"engName\": \"<string>\",\n    \"registrationDate\": \"<string>\",\n    \"registrationNumber\": \"<string>\",\n    \"fgtCode\": \"<string>\",\n    \"pictureUuids\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"barCodes\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"activeSubstances\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"kfgCodes\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"nozologyCodes\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"rusNameIsCustom\": \"<boolean>\",\n    \"engNameIsCustom\": \"<boolean>\",\n    \"barCodesIsCustom\": \"<boolean>\",\n    \"activeSubstancesIsCustom\": \"<boolean>\",\n    \"nozologiesIsCustom\": \"<boolean>\",\n    \"kfgsIsCustom\": \"<boolean>\",\n    \"releaseFormIsCustom\": \"<boolean>\",\n    \"registrationDateIsCustom\": \"<boolean>\",\n    \"registrationNumberIsCustom\": \"<boolean>\",\n    \"descriptionIsCustom\": \"<boolean>\",\n    \"categoryIsCustom\": \"<boolean>\",\n    \"fgtIsCustom\": \"<boolean>\",\n    \"picturesIsCustom\": \"<boolean>\",\n    \"manufacturerIsCustom\": \"<boolean>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/user/global-product",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"user",
												"global-product"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Invalid input",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": {
													"content": "Added as a part of security scheme: apikey",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"isEnabled\": \"<boolean>\",\n    \"isApproved\": \"<boolean>\",\n    \"rusName\": \"<string>\",\n    \"releaseForm\": \"<string>\",\n    \"description\": \"<string>\",\n    \"categoryAtcCode\": \"<string>\",\n    \"manufacturerName\": \"<string>\",\n    \"manufacturerCountry\": \"<integer>\",\n    \"prototypeProductId\": \"<integer>\",\n    \"engName\": \"<string>\",\n    \"registrationDate\": \"<string>\",\n    \"registrationNumber\": \"<string>\",\n    \"fgtCode\": \"<string>\",\n    \"pictureUuids\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"barCodes\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"activeSubstances\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"kfgCodes\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"nozologyCodes\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"rusNameIsCustom\": \"<boolean>\",\n    \"engNameIsCustom\": \"<boolean>\",\n    \"barCodesIsCustom\": \"<boolean>\",\n    \"activeSubstancesIsCustom\": \"<boolean>\",\n    \"nozologiesIsCustom\": \"<boolean>\",\n    \"kfgsIsCustom\": \"<boolean>\",\n    \"releaseFormIsCustom\": \"<boolean>\",\n    \"registrationDateIsCustom\": \"<boolean>\",\n    \"registrationNumberIsCustom\": \"<boolean>\",\n    \"descriptionIsCustom\": \"<boolean>\",\n    \"categoryIsCustom\": \"<boolean>\",\n    \"fgtIsCustom\": \"<boolean>\",\n    \"picturesIsCustom\": \"<boolean>\",\n    \"manufacturerIsCustom\": \"<boolean>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/user/global-product",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"user",
												"global-product"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Retrieving collection of Global products.",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bc7f13e7-6de2-40ca-b8e6-2d2fce6b2734",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"const idGlPr = jsonData.data.items.find(u => u.id === parseInt(pm.environment.get(\"IdNewGPPr\")));\r",
											"const idGlPr2 = idGlPr ? idGlPr.id : 'not found';\r",
											"console.log (idGlPr)\r",
											"\r",
											"pm.test(\"Compare Global product_id\", function () {\r",
											"    pm.expect(idGlPr2).to.eql(parseInt(pm.environment.get(\"IdNewGPPr\")));\r",
											"});\r",
											"pm.test(\"Compare Global product_name\", function () {\r",
											"    pm.expect(idGlPr.rusName).to.eql(pm.environment.get(\"ruNameGlPr\"));\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/user/global-products",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"user",
										"global-products"
									],
									"query": [
										{
											"key": "page",
											"value": "",
											"disabled": true
										},
										{
											"key": "per_page",
											"value": "",
											"disabled": true
										},
										{
											"key": "barCode",
											"value": "8901086130273",
											"disabled": true
										},
										{
											"key": "name",
											"value": "{{ruNameGlPr}}",
											"disabled": true
										},
										{
											"key": "all",
											"value": "false",
											"disabled": true
										},
										{
											"key": "id",
											"value": "{{IdNewGPPr}}",
											"disabled": true
										},
										{
											"key": "barCode",
											"value": "4605095001534",
											"disabled": true
										},
										{
											"key": "atc_code",
											"value": "N03AG01",
											"disabled": true
										},
										{
											"key": "active_substance",
											"value": "sulfadoxine",
											"disabled": true
										},
										{
											"key": "enabled",
											"value": "false",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieving products search data.",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2611ae06-10d0-4876-94cc-a1b44947fc45",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"const idGlPr = jsonData.data.items.find(u => u.globalProductId === parseInt(pm.environment.get(\"IdNewGPPr\")));\r",
											"const idGlPr2 = idGlPr ? idGlPr.globalProductId : 'not found';\r",
											"console.log (idGlPr)\r",
											"\r",
											"pm.test(\"Compare Global product_id\", function () {\r",
											"    pm.expect(idGlPr2).to.eql(parseInt(pm.environment.get(\"IdNewGPPr\")));\r",
											"});\r",
											"pm.test(\"Compare Global product_name\", function () {\r",
											"    pm.expect(idGlPr.rusName).to.eql(pm.environment.get(\"ruNameGlPr\"));\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/public/products/search?name={{ruNameGlPr}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"public",
										"products",
										"search"
									],
									"query": [
										{
											"key": "page",
											"value": "",
											"disabled": true
										},
										{
											"key": "per_page",
											"value": "",
											"disabled": true
										},
										{
											"key": "barCode",
											"value": "8901086130273",
											"disabled": true
										},
										{
											"key": "name",
											"value": "{{ruNameGlPr}}"
										},
										{
											"key": "all",
											"value": "false",
											"disabled": true
										},
										{
											"key": "id",
											"value": "{{IdNewGPPr}}",
											"disabled": true
										},
										{
											"key": "barCode",
											"value": "4605095001534",
											"disabled": true
										},
										{
											"key": "atc_code",
											"value": "N03AG01",
											"disabled": true
										},
										{
											"key": "active_substance",
											"value": "sulfadoxine",
											"disabled": true
										},
										{
											"key": "enabled",
											"value": "false",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "User registration. Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "823c1dbe-366c-43f6-9791-10fba4333d38",
										"exec": [
											"pm.environment.set(\"idAdmin\", pm.response.json().data.item.id);\r",
											"pm.environment.set(\"emailAdmin\", pm.response.json().data.item.email);\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test(\"Created admin\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data.item.type).to.eql(\"admin\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token_user}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"description": "Value: Bearer {jwt}",
										"key": "Authorization",
										"value": ""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"{{$randomFirstName}}\",\n    \"lastName\": \"{{$randomLastName}}\",\n    \"email\": \"{{$randomEmail}}\",\n    \"password\": \"{{password}}\",\n    \"type\": \"admin\",\n    \"adminTestFirstField\":\"{{$randomCompanyName}} test\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/user/registration/type/:type",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"user",
										"registration",
										"type",
										":type"
									],
									"variable": [
										{
											"id": "d4430880-9f35-4675-b603-9b42fdd499a2",
											"key": "type",
											"value": "admin",
											"type": "string",
											"description": "(Required) user type"
										}
									]
								},
								"description": "Creating User."
							},
							"response": [
								{
									"name": "Invalid input",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"<string>\",\n    \"fullName\": \"<string>\",\n    \"email\": \"<string>\",\n    \"password\": \"<string>\",\n    \"type\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/user/registration/type/:type",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"user",
												"registration",
												"type",
												":type"
											],
											"variable": [
												{
													"key": "type"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "User information",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"<string>\",\n    \"fullName\": \"<string>\",\n    \"email\": \"<string>\",\n    \"password\": \"<string>\",\n    \"type\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/user/registration/type/:type",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"user",
												"registration",
												"type",
												":type"
											],
											"variable": [
												{
													"key": "type"
												}
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Retrieving collection of Admin data.",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6eeb5ad8-aaf9-4833-b9eb-37faefd5e4d8",
										"exec": [
											"//count quantity users in response\r",
											"let jsonData = pm.response.json();\r",
											"let items = jsonData.data.items;\r",
											"console.log(items.length);\r",
											"\r",
											"\r",
											"const idAdmin = jsonData.data.items.find(u => u.id === parseInt(pm.environment.get(\"idAdmin\")));\r",
											"const idAdmin2 = idAdmin ? idAdmin.id : 'not found';\r",
											"console.log (idAdmin)\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Compare Admin_id\", function () {\r",
											"    pm.expect(idAdmin2).to.eql(parseInt(pm.environment.get(\"idAdmin\")));\r",
											"});\r",
											"pm.test(\"Compare Global Admin_email\", function () {\r",
											"    pm.expect(idAdmin.email).to.eql(pm.environment.get(\"emailAdmin\"));\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token_user}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"description": "Value: Bearer {jwt}",
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/user/admins",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"user",
										"admins"
									],
									"query": [
										{
											"key": "order[full_name]",
											"value": "asc",
											"description": "Page number",
											"disabled": true
										},
										{
											"key": "id",
											"value": "64",
											"description": "Page items count",
											"disabled": true
										},
										{
											"key": "first_name",
											"value": "Theron",
											"disabled": true
										},
										{
											"key": "last_name",
											"value": "Gutmann",
											"disabled": true
										},
										{
											"key": "email",
											"value": "Dandre.Rogahn19@yahoo.com",
											"disabled": true
										},
										{
											"key": "phone_number",
											"value": "",
											"disabled": true
										},
										{
											"key": "page",
											"value": "1",
											"disabled": true
										},
										{
											"key": "per_page",
											"value": "10",
											"disabled": true
										}
									]
								},
								"description": "Retrieving collection of Admin data."
							},
							"response": [
								{
									"name": "Invalid input",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/user/admins?page=<integer>&per_page=<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"user",
												"admins"
											],
											"query": [
												{
													"key": "page",
													"value": "<integer>"
												},
												{
													"key": "per_page",
													"value": "<integer>"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Admins list",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/user/admins?page=<integer>&per_page=<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"user",
												"admins"
											],
											"query": [
												{
													"key": "page",
													"value": "<integer>"
												},
												{
													"key": "per_page",
													"value": "<integer>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "User registration enterprise_admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c95c241a-923f-4329-910c-35f84afda15c",
										"exec": [
											"pm.test(\"Created type-enterprise_admin\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data.item.type).to.eql(\"enterprise_admin\");\r",
											"});\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.environment.set(\"idEntAd\", pm.response.json().data.item.id);\r",
											"pm.environment.set(\"emailEntAd\", pm.response.json().data.item.email);\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token_user}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"description": "Value: Bearer {jwt}",
										"key": "Authorization",
										"value": ""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"{{$randomFirstName}}\",\n    \"lastName\": \"{{$randomLastName}}\",\n    \"email\": \"{{$randomEmail}}\",\n    \"password\": \"{{password}}\",\n    \"type\": \"enterprise_admin\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/user/registration/type/:type",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"user",
										"registration",
										"type",
										":type"
									],
									"variable": [
										{
											"id": "a472d3f1-efe4-44c4-8cec-12cabf74be5e",
											"key": "type",
											"value": "enterprise_admin",
											"type": "string",
											"description": "(Required) user type"
										}
									]
								},
								"description": "Creating User."
							},
							"response": [
								{
									"name": "Invalid input",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"<string>\",\n    \"fullName\": \"<string>\",\n    \"email\": \"<string>\",\n    \"password\": \"<string>\",\n    \"type\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/user/registration/type/:type",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"user",
												"registration",
												"type",
												":type"
											],
											"variable": [
												{
													"key": "type"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "User information",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"<string>\",\n    \"fullName\": \"<string>\",\n    \"email\": \"<string>\",\n    \"password\": \"<string>\",\n    \"type\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/user/registration/type/:type",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"user",
												"registration",
												"type",
												":type"
											],
											"variable": [
												{
													"key": "type"
												}
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Add User to Pharmacy.",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8ec35129-7e2f-44a7-b2f3-4f0c8b8862c7",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token_user}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"description": "Value: Bearer {jwt}",
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/user/pharmacy/:id/add-user/:userEmail",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"user",
										"pharmacy",
										":id",
										"add-user",
										":userEmail"
									],
									"variable": [
										{
											"id": "a0d450b2-149d-437d-bb1e-b224e0b71be9",
											"key": "id",
											"value": "3",
											"type": "string",
											"description": "(Required) "
										},
										{
											"id": "97c26c96-702c-49a8-b646-917ae770a135",
											"key": "userEmail",
											"value": "{{emailEntAd}}",
											"type": "string"
										}
									]
								},
								"description": "Add User to Pharmacy."
							},
							"response": [
								{
									"name": "Not found",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/user/pharmacy/:id/add-user/:userId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"user",
												"pharmacy",
												":id",
												"add-user",
												":userId"
											],
											"variable": [
												{
													"key": "id"
												},
												{
													"key": "userId"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Invalid input",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/user/pharmacy/:id/add-user/:userId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"user",
												"pharmacy",
												":id",
												"add-user",
												":userId"
											],
											"variable": [
												{
													"key": "id"
												},
												{
													"key": "userId"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "User added to Pharmacy",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/user/pharmacy/:id/add-user/:userId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"user",
												"pharmacy",
												":id",
												"add-user",
												":userId"
											],
											"variable": [
												{
													"key": "id"
												},
												{
													"key": "userId"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Retrieving collection of EnterpriseAdmin data.",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d2ed9c1f-1bdd-4f32-9f21-dcc52158b3dd",
										"exec": [
											"//count quantity users in response\r",
											"let jsonData = pm.response.json();\r",
											"let items = jsonData.data.items;\r",
											"console.log(items.length);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const idAdmin = jsonData.data.items.find(u => u.id === parseInt(pm.environment.get(\"idEntAd\")));\r",
											"const idAdmin2 = idAdmin ? idAdmin.id : 'not found';\r",
											"console.log (idAdmin)\r",
											"\r",
											"pm.test(\"Compare EntAdmin_id\", function () {\r",
											"    pm.expect(idAdmin2).to.eql(parseInt(pm.environment.get(\"idEntAd\")));\r",
											"});\r",
											"pm.test(\"Compare EntAdmin_email\", function () {\r",
											"    pm.expect(idAdmin.email).to.eql(pm.environment.get(\"emailEntAd\"));\r",
											"});\r",
											"pm.test(\"Compare EntAdmin_pharmacy_id\", function () {\r",
											"    pm.expect(idAdmin.pharmacies[0].id).to.eql(3);\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token_user}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"description": "Value: Bearer {jwt}",
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/user/enterprise-admins",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"user",
										"enterprise-admins"
									],
									"query": [
										{
											"key": "page",
											"value": "1",
											"description": "Page number",
											"disabled": true
										},
										{
											"key": "per_page",
											"value": "20",
											"description": "Page items count",
											"disabled": true
										},
										{
											"key": "id",
											"value": "5",
											"disabled": true
										},
										{
											"key": "first_name",
											"value": "Joshuah",
											"disabled": true
										},
										{
											"key": "last_name",
											"value": "Vandervort",
											"disabled": true
										},
										{
											"key": "email",
											"value": "Dasia_Streich96@yahoo.com",
											"disabled": true
										},
										{
											"key": "phone_number",
											"value": "",
											"disabled": true
										},
										{
											"key": "pharmacy_id",
											"value": "3",
											"disabled": true
										},
										{
											"key": "pharmacy_name",
											"value": "Pharmacy 3",
											"disabled": true
										},
										{
											"key": "order[id]",
											"value": "desc",
											"disabled": true
										}
									]
								},
								"description": "Retrieving collection of EnterpriseAdmin data."
							},
							"response": [
								{
									"name": "Invalid input",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/user/enterprise-admins?page=<integer>&per_page=<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"user",
												"enterprise-admins"
											],
											"query": [
												{
													"key": "page",
													"value": "<integer>"
												},
												{
													"key": "per_page",
													"value": "<integer>"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Enterprise admins list",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/user/enterprise-admins?page=<integer>&per_page=<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"user",
												"enterprise-admins"
											],
											"query": [
												{
													"key": "page",
													"value": "<integer>"
												},
												{
													"key": "per_page",
													"value": "<integer>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "User registration. Enterprise_manager",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fafb2042-b121-47c5-9a40-bdab21b1d1d2",
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.test(\"Created enterprise_manager\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data.item.type).to.eql(\"enterprise_manager\");\r",
											"});\r",
											"\r",
											"pm.environment.set(\"idEntMan\", pm.response.json().data.item.id);\r",
											"pm.environment.set(\"emailEntMan\", pm.response.json().data.item.email);\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token_user}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"description": "Value: Bearer {jwt}",
										"key": "Authorization",
										"value": ""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"firstName\": \"{{$randomFirstName}}\",\n    \"lastName\": \"{{$randomLastName}}\",\n    \"email\": \"{{$randomEmail}}\",\n    \"password\": \"{{password}}\",\n    \"type\": \"enterprise_manager\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/user/registration/type/:type",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"user",
										"registration",
										"type",
										":type"
									],
									"variable": [
										{
											"id": "583dd7e1-af34-406b-a2af-a852b6a5dfa8",
											"key": "type",
											"value": "enterprise_manager",
											"type": "string",
											"description": "(Required) user type"
										}
									]
								},
								"description": "Creating User."
							},
							"response": [
								{
									"name": "Invalid input",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"<string>\",\n    \"fullName\": \"<string>\",\n    \"email\": \"<string>\",\n    \"password\": \"<string>\",\n    \"type\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/user/registration/type/:type",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"user",
												"registration",
												"type",
												":type"
											],
											"variable": [
												{
													"key": "type"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "User information",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"<string>\",\n    \"fullName\": \"<string>\",\n    \"email\": \"<string>\",\n    \"password\": \"<string>\",\n    \"type\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/user/registration/type/:type",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"user",
												"registration",
												"type",
												":type"
											],
											"variable": [
												{
													"key": "type"
												}
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Add EntMan to Pharmacy.",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b710e7c2-27cd-4068-aab0-f8f558fdd667",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token_user}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"description": "Value: Bearer {jwt}",
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/user/pharmacy/:id/add-user/:userEmail",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"user",
										"pharmacy",
										":id",
										"add-user",
										":userEmail"
									],
									"variable": [
										{
											"id": "e15352f2-645f-443b-9e93-0146f8d0f4b7",
											"key": "id",
											"value": "3",
											"type": "string",
											"description": "(Required) "
										},
										{
											"id": "00fec3da-4052-4d3f-be64-a9808a36af45",
											"key": "userEmail",
											"value": "{{emailEntMan}}",
											"type": "string"
										}
									]
								},
								"description": "Add User to Pharmacy."
							},
							"response": [
								{
									"name": "Not found",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/user/pharmacy/:id/add-user/:userId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"user",
												"pharmacy",
												":id",
												"add-user",
												":userId"
											],
											"variable": [
												{
													"key": "id"
												},
												{
													"key": "userId"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Invalid input",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/user/pharmacy/:id/add-user/:userId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"user",
												"pharmacy",
												":id",
												"add-user",
												":userId"
											],
											"variable": [
												{
													"key": "id"
												},
												{
													"key": "userId"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "User added to Pharmacy",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/user/pharmacy/:id/add-user/:userId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"user",
												"pharmacy",
												":id",
												"add-user",
												":userId"
											],
											"variable": [
												{
													"key": "id"
												},
												{
													"key": "userId"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Retrieving collection of EnterpriseManager data.",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4d5cb4cd-2abd-45ca-a31e-4c42d23d3f41",
										"exec": [
											"let jsonData = pm.response.json();\r",
											"let items = jsonData.data.items;\r",
											"console.log(items.length);\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const idAdmin = jsonData.data.items.find(u => u.id === parseInt(pm.environment.get(\"idEntMan\")));\r",
											"const idAdmin2 = idAdmin ? idAdmin.id : 'not found';\r",
											"console.log (idAdmin)\r",
											"\r",
											"pm.test(\"Compare EntMan_id\", function () {\r",
											"    pm.expect(idAdmin2).to.eql(parseInt(pm.environment.get(\"idEntMan\")));\r",
											"});\r",
											"pm.test(\"Compare EntMan_email\", function () {\r",
											"    pm.expect(idAdmin.email).to.eql(pm.environment.get(\"emailEntMan\"));\r",
											"});\r",
											"pm.test(\"Compare EntMan_pharmacy_id\", function () {\r",
											"    pm.expect(idAdmin.pharmacies[0].id).to.eql(3);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token_user}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"description": "Value: Bearer {jwt}",
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/user/enterprise-managers?page=1&per_page=20&order[id]=desc",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"user",
										"enterprise-managers"
									],
									"query": [
										{
											"key": "page",
											"value": "1",
											"description": "Page number"
										},
										{
											"key": "per_page",
											"value": "20",
											"description": "Page items count"
										},
										{
											"key": "id",
											"value": "72",
											"disabled": true
										},
										{
											"key": "first_name",
											"value": "Bernice",
											"disabled": true
										},
										{
											"key": "last_name",
											"value": "Walker",
											"disabled": true
										},
										{
											"key": "email",
											"value": "Amara_Tremblay@gmail.com",
											"disabled": true
										},
										{
											"key": "phone_number",
											"value": "",
											"disabled": true
										},
										{
											"key": "pharmacy_id",
											"value": "3",
											"disabled": true
										},
										{
											"key": "pharmacy_name",
											"value": "Pharmacy 3",
											"disabled": true
										},
										{
											"key": "order[id]",
											"value": "desc"
										},
										{
											"key": "order[full_name]",
											"value": "desc",
											"disabled": true
										}
									]
								},
								"description": "Retrieving collection of EnterpriseManager data."
							},
							"response": [
								{
									"name": "Enreprise managers list",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/user/enterprise-managers?page=<integer>&per_page=<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"user",
												"enterprise-managers"
											],
											"query": [
												{
													"key": "page",
													"value": "<integer>"
												},
												{
													"key": "per_page",
													"value": "<integer>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Invalid input",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/user/enterprise-managers?page=<integer>&per_page=<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"user",
												"enterprise-managers"
											],
											"query": [
												{
													"key": "page",
													"value": "<integer>"
												},
												{
													"key": "per_page",
													"value": "<integer>"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Creating Order- delivery_adress",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8a6c4486-7d58-4dfe-95e2-7a36109c0cd9",
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"pm.environment.set(\"orderId\", pm.response.json().data.item.orderId);\r",
											"\r",
											"pm.test(\"Status new\", function () {\r",
											"    pm.expect(jsonData.data.item.status).to.eql(\"new\");\r",
											"});\r",
											"\r",
											"pm.test(\"Sum order\", function () {\r",
											"   pm.expect((jsonData.data.item.pharmacyProductOrderDataList[0].price)*(jsonData.data.item.pharmacyProductOrderDataList[0].productCount)).to.eql(jsonData.data.item.pharmacyProductsTotalPrice);\r",
											"});\r",
											"pm.environment.set(\"Order_cost\", (pm.response.json().data.item.pharmacyProductsTotalPrice)+(pm.response.json().data.item.deliveryPrice));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token_customer}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"pharmacyId\": 3,\n  \"contactInfo\": {\n   \"name\": \"{{$randomFullName}}\",\n   \"phone\": \"{{rphone}}\",\n   \"email\": \"{{$randomEmail}}\"\n  },\n  \"deliveryInfo\": {\n     \"type\": \"delivery_address\",\n     \"comment\": \"{{$randomPhrase}}\",\n     \"address\": {\n     \"city\": \"{{$randomCity}}\",\n     \"street\": \"{{$randomStreetAddress}}\",\n     \"house\": \"{{$randomInt}}\",\n     \"apartment\": \"{{$randomInt}}\"\n     }\n  },\n  \"paymentType\": \"1\",\n  \"pharmacyProductOrderCreateDataList\": [\n    {\n     \"pharmacyProductId\": {{pharmacyPrIdNull}},\n      \"requestedPrice\": 12.435435399,\n      \"count\": {{random_count}}\n    }\n  ],\n  \"deliveryPrice\": 50\n}\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/customer/order",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"customer",
										"order"
									]
								},
								"description": "Creating Order."
							},
							"response": [
								{
									"name": "Invalid input",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": {
													"content": "Added as a part of security scheme: apikey",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"paymentType\": \"<string>\",\n    \"pharmacyId\": \"<integer>\",\n    \"contactInfoCreateData\": {\n        \"name\": \"<string>\",\n        \"phone\": \"<string>\",\n        \"email\": \"<string>\"\n    },\n    \"deliveryInfoCreateData\": {\n        \"type\": \"<string>\",\n        \"comment\": \"<string>\",\n        \"addressCreateData\": {\n            \"city\": \"<string>\",\n            \"street\": \"<string>\",\n            \"house\": \"<string>\",\n            \"apartment\": \"<string>\"\n        }\n    },\n    \"pharmacyProductOrderCreateDataList\": [\n        {\n            \"pharmacyProductId\": \"<integer>\",\n            \"price\": \"<integer>\",\n            \"count\": \"<integer>\"\n        },\n        {\n            \"pharmacyProductId\": \"<integer>\",\n            \"price\": \"<integer>\",\n            \"count\": \"<integer>\"\n        }\n    ],\n    \"deliveryPrice\": \"<number>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/customer/order",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"customer",
												"order"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Order created",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": {
													"content": "Added as a part of security scheme: apikey",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": "<API Key>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"paymentType\": \"<string>\",\n    \"pharmacyId\": \"<integer>\",\n    \"contactInfoCreateData\": {\n        \"name\": \"<string>\",\n        \"phone\": \"<string>\",\n        \"email\": \"<string>\"\n    },\n    \"deliveryInfoCreateData\": {\n        \"type\": \"<string>\",\n        \"comment\": \"<string>\",\n        \"addressCreateData\": {\n            \"city\": \"<string>\",\n            \"street\": \"<string>\",\n            \"house\": \"<string>\",\n            \"apartment\": \"<string>\"\n        }\n    },\n    \"pharmacyProductOrderCreateDataList\": [\n        {\n            \"pharmacyProductId\": \"<integer>\",\n            \"price\": \"<integer>\",\n            \"count\": \"<integer>\"\n        },\n        {\n            \"pharmacyProductId\": \"<integer>\",\n            \"price\": \"<integer>\",\n            \"count\": \"<integer>\"\n        }\n    ],\n    \"deliveryPrice\": \"<number>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/customer/order",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"customer",
												"order"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Retrieving collection of orders. Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "03a9c3df-55c0-4852-9dd7-bf10070b15ed",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"const idAdmin = jsonData.data.items.find(u => u.orderId === parseInt(pm.environment.get(\"orderId\")));\r",
											"const idAdmin2 = idAdmin ? idAdmin.orderId : 'not found';\r",
											"console.log (idAdmin)\r",
											"\r",
											"pm.test(\"Compare Order_id\", function () {\r",
											"    pm.expect(idAdmin2).to.eql(parseInt(pm.environment.get(\"orderId\")));\r",
											"});\r",
											"pm.test(\"Compare Order_sum\", function () {\r",
											"    pm.expect(idAdmin.totalPrice).to.eql(pm.environment.get(\"Order_cost\"));\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token_user}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/v1/user/orders",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"user",
										"orders"
									],
									"query": [
										{
											"key": "order[id]",
											"value": "desc",
											"disabled": true
										},
										{
											"key": "order[name]",
											"value": "",
											"disabled": true
										},
										{
											"key": "order[total_price]",
											"value": "",
											"disabled": true
										},
										{
											"key": "pharmacy_id",
											"value": "3",
											"disabled": true
										},
										{
											"key": "status",
											"value": "in_progress",
											"disabled": true
										},
										{
											"key": "status",
											"value": "done",
											"disabled": true
										},
										{
											"key": "status",
											"value": "canceled",
											"disabled": true
										},
										{
											"key": "status",
											"value": "new",
											"disabled": true
										},
										{
											"key": "status",
											"value": "ready",
											"disabled": true
										},
										{
											"key": "status",
											"value": "to_delivery",
											"disabled": true
										},
										{
											"key": "status",
											"value": "in_delivery",
											"disabled": true
										},
										{
											"key": "delivery_type",
											"value": "delivery_address",
											"disabled": true
										},
										{
											"key": "delivery_type",
											"value": "pickup",
											"disabled": true
										},
										{
											"key": "page",
											"value": "",
											"disabled": true
										},
										{
											"key": "per_page",
											"value": "",
											"disabled": true
										},
										{
											"key": "pharmacy_id",
											"value": "",
											"disabled": true
										},
										{
											"key": "name",
											"value": "Lorna.Klein63",
											"disabled": true
										},
										{
											"key": "min_total_price",
											"value": "7633.6",
											"disabled": true
										},
										{
											"key": "max_total_price",
											"value": "7633.7",
											"disabled": true
										},
										{
											"key": "id",
											"value": "11",
											"disabled": true
										},
										{
											"key": "phone",
											"value": "258852677007",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Creating Pharmacy.",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7aaa06c9-ac14-43c6-8e62-0a8376dcef7f",
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.environment.set(\"PharmaIdCr\", pm.response.json().data.item.id);\r",
											"pm.environment.set(\"RegionId\", pm.response.json().data.item.region.id);\r",
											"\r",
											"pm.test(\"isEnabled=true\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data.item.isEnabled).to.eql(true);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7e8843cd-f901-4904-826c-3ce9543b6056",
										"exec": [
											"pm.environment.set(\"random_phone\", _.random(10000000000, 90000000000));\r",
											"pm.environment.set(\"random_phone2\", _.random(100000000000, 900000000000));\r",
											"var phn = [pm.environment.get(\"random_phone\"),pm.environment.get(\"random_phone2\"),];\r",
											"var shuffle = _.shuffle(phn);\r",
											"pm.environment.set(\"rphone\", shuffle[0]);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token_user}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"description": "Value: Bearer {jwt}",
										"key": "Authorization",
										"value": ""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"{{$randomProductName}}\",\n  \"phone\": \"{{rphone}}\",\n  \"regionId\": 6,\n  \"location\": {\n    \"lat\": 0,\n    \"lng\": 0,\n    \"address\": \"ул. Ньютона, 103\"\n  },\n  \"logoUuid\": \"\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/user/pharmacy",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"user",
										"pharmacy"
									]
								},
								"description": "Creating Pharmacy."
							},
							"response": [
								{
									"name": "Pharmacy created",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"phone\": \"<string>\",\n    \"regionId\": \"<integer>\",\n    \"location\": {\n        \"latitude\": \"<number>\",\n        \"longitude\": \"<number>\",\n        \"address\": \"<string>\"\n    },\n    \"logoUuid\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/user/pharmacy",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"user",
												"pharmacy"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Invalid input",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"phone\": \"<string>\",\n    \"regionId\": \"<integer>\",\n    \"location\": {\n        \"latitude\": \"<number>\",\n        \"longitude\": \"<number>\",\n        \"address\": \"<string>\"\n    },\n    \"logoUuid\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/user/pharmacy",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"user",
												"pharmacy"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Retrieving collection of Pharmacy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "217c7d68-a3d7-44a0-98ae-701732991b8e",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"var jsonData = pm.response.json();\r",
											"\r",
											"const pharma = jsonData.data.items.find(u => u.id === parseInt(pm.environment.get(\"PharmaIdCr\")));\r",
											"const pharmaid = pharma ? pharma.id : 'not found';\r",
											"\r",
											"console.log(pharma);\r",
											"console.log(pharmaid);\r",
											"\r",
											"pm.test(\"Compare pharma_id\", function () {\r",
											"    pm.expect(pharmaid).to.eql(parseInt(pm.environment.get(\"PharmaIdCr\")));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token_user}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"description": "Value: Bearer {jwt}",
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/user/pharmacies",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"user",
										"pharmacies"
									],
									"query": [
										{
											"key": "order[id]",
											"value": "asc",
											"disabled": true
										},
										{
											"key": "order[name]",
											"value": "<string>",
											"disabled": true
										},
										{
											"key": "order[address]",
											"value": "<string>",
											"disabled": true
										},
										{
											"key": "order[user_count]",
											"value": "<string>",
											"disabled": true
										},
										{
											"key": "id",
											"value": "9",
											"description": "id",
											"disabled": true
										},
										{
											"key": "name",
											"value": "Practical Steel Salad",
											"description": "Pharmacy name",
											"disabled": true
										},
										{
											"key": "address",
											"value": "ул. Ньютона",
											"description": "Pharmacy address",
											"disabled": true
										},
										{
											"key": "phone_number",
											"value": "256930985096",
											"description": "Pharmacy phone number",
											"disabled": true
										},
										{
											"key": "enterprise_admin",
											"value": "",
											"description": "Pharmacy enterprise admin name",
											"disabled": true
										},
										{
											"key": "page",
											"value": "1",
											"description": "Page number",
											"disabled": true
										},
										{
											"key": "per_page",
											"value": "12",
											"description": "Page items count",
											"disabled": true
										}
									]
								},
								"description": "Retrieving collection of Pharmacy."
							},
							"response": [
								{
									"name": "Invalid input",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/user/pharmacies?order[id]=<string>&order[name]=<string>&order[address]=<string>&order[user_count]=<string>&id=<integer>&name=<string>&address=<string>&phone_number=<string>&enterprise_admin=<string>&page=<integer>&per_page=<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"user",
												"pharmacies"
											],
											"query": [
												{
													"key": "order[id]",
													"value": "<string>"
												},
												{
													"key": "order[name]",
													"value": "<string>"
												},
												{
													"key": "order[address]",
													"value": "<string>"
												},
												{
													"key": "order[user_count]",
													"value": "<string>"
												},
												{
													"key": "id",
													"value": "<integer>"
												},
												{
													"key": "name",
													"value": "<string>"
												},
												{
													"key": "address",
													"value": "<string>"
												},
												{
													"key": "phone_number",
													"value": "<string>"
												},
												{
													"key": "enterprise_admin",
													"value": "<string>"
												},
												{
													"key": "page",
													"value": "<integer>"
												},
												{
													"key": "per_page",
													"value": "<integer>"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Pharmacies list",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/user/pharmacies?order[id]=<string>&order[name]=<string>&order[address]=<string>&order[user_count]=<string>&id=<integer>&name=<string>&address=<string>&phone_number=<string>&enterprise_admin=<string>&page=<integer>&per_page=<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"user",
												"pharmacies"
											],
											"query": [
												{
													"key": "order[id]",
													"value": "<string>"
												},
												{
													"key": "order[name]",
													"value": "<string>"
												},
												{
													"key": "order[address]",
													"value": "<string>"
												},
												{
													"key": "order[user_count]",
													"value": "<string>"
												},
												{
													"key": "id",
													"value": "<integer>"
												},
												{
													"key": "name",
													"value": "<string>"
												},
												{
													"key": "address",
													"value": "<string>"
												},
												{
													"key": "phone_number",
													"value": "<string>"
												},
												{
													"key": "enterprise_admin",
													"value": "<string>"
												},
												{
													"key": "page",
													"value": "<integer>"
												},
												{
													"key": "per_page",
													"value": "<integer>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Retrieving collection of Prototype products.",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token_user}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}​/api/v1/user/prototype-products",
									"host": [
										"{{baseUrl}}​"
									],
									"path": [
										"api",
										"v1",
										"user",
										"prototype-products"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieving collection of Customer data by phone",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d37a7d2b-a30f-4a16-88f3-33df08f22f5c",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Compare id_customer\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data.items[0].id).to.eql(pm.environment.get(\"custId\"));\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token_user}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [],
									"options": {
										"formdata": {}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/user/customers/search-by-name-or-phone?name_or_phone={{phone_customer}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"user",
										"customers",
										"search-by-name-or-phone"
									],
									"query": [
										{
											"key": "order[id]",
											"value": "asc",
											"disabled": true
										},
										{
											"key": "order[id]",
											"value": "desc",
											"disabled": true
										},
										{
											"key": "name_or_phone",
											"value": "{{phone_customer}}"
										},
										{
											"key": "name_or_phone",
											"value": "{{custName}}",
											"disabled": true
										},
										{
											"key": "page",
											"value": null,
											"disabled": true
										},
										{
											"key": "per_page",
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieving collection of Customer data by name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8ade7570-22b0-41b8-a144-26772223d99a",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Compare id_customer\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data.items[0].id).to.eql(pm.environment.get(\"custId\"));\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token_user}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [],
									"options": {
										"formdata": {}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/user/customers/search-by-name-or-phone?name_or_phone={{custName}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"user",
										"customers",
										"search-by-name-or-phone"
									],
									"query": [
										{
											"key": "order[id]",
											"value": "asc",
											"disabled": true
										},
										{
											"key": "order[id]",
											"value": "desc",
											"disabled": true
										},
										{
											"key": "name_or_phone",
											"value": "{{phone_customer}}",
											"disabled": true
										},
										{
											"key": "name_or_phone",
											"value": "{{custName}}"
										},
										{
											"key": "page",
											"value": null,
											"disabled": true
										},
										{
											"key": "per_page",
											"value": null,
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieves collection of Region data.",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2c2737a2-9886-4fe3-9237-4c57595c0303",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token_user}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [],
									"options": {
										"formdata": {}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/public/regions",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"public",
										"regions"
									],
									"query": [
										{
											"key": "id",
											"value": "",
											"disabled": true
										},
										{
											"key": "maxLevelCount",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Test Customer",
					"item": [
						{
							"name": "Customer registration.",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "57f76106-f144-4a86-903b-eba891683be8",
										"exec": [
											"pm.environment.set(\"phone_customer\", pm.response.json().data.item.phone);\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "72a3a930-7729-4333-82cf-c1684172d6ef",
										"exec": [
											"pm.environment.set(\"random_phone\", _.random(10000000000, 90000000000));\r",
											"pm.environment.set(\"random_phone2\", _.random(100000000000, 900000000000));\r",
											"var phn = [pm.environment.get(\"random_phone\"),pm.environment.get(\"random_phone2\"),];\r",
											"var shuffle = _.shuffle(phn);\r",
											"pm.environment.set(\"rphone\", shuffle[0]);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"phone\": \"{{rphone}}\",\n\"name\": \"{{$randomUserName}}\",\n\"email\": \"{{$randomEmail}}\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/customer/registration",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"customer",
										"registration"
									]
								},
								"description": "Creating Customer, generating code for it and sending sms."
							},
							"response": [
								{
									"name": "Customer created and sent verification code",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"phone\": \"<string>\",\n    \"name\": \"<string>\",\n    \"email\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/customer/registration",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"customer",
												"registration"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Invalid input",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"phone\": \"<string>\",\n    \"name\": \"<string>\",\n    \"email\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/customer/registration",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"customer",
												"registration"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Customer authentication.",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e9f85c17-8e80-436f-96e2-acd6f936a1ca",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"phone\": \"{{phone_customer}}\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/customer/auth",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"customer",
										"auth"
									]
								},
								"description": "Generating code for Customer and sending sms."
							},
							"response": [
								{
									"name": "Sent verification code",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"phone\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/customer/auth",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"customer",
												"auth"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Not found",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"phone\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/customer/auth",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"customer",
												"auth"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Invalid input",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"phone\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/customer/auth",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"customer",
												"auth"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Customer login. Phone",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "db0f5ce8-d566-445c-8eb7-f9caedb7648a",
										"exec": [
											"pm.environment.set(\"token_customer\", pm.response.json().data.token);\r",
											"pm.environment.set(\"uuid_customer\", pm.response.json().data.item.uuid);\r",
											"pm.environment.set(\"refreshToken_customer\", pm.response.json().data.refreshToken);\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"phone\": \"{{rphone}}\",\n    \"code\": \"11111\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/customer/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"customer",
										"login"
									]
								},
								"description": "Customer login."
							},
							"response": [
								{
									"name": "Returns tokens",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"phone\": \"<string>\",\n    \"code\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/customer/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"customer",
												"login"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returns if request parameters is not valid",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"phone\": \"<string>\",\n    \"code\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/customer/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"customer",
												"login"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returns if authentication failing",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"phone\": \"<string>\",\n    \"code\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/customer/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"customer",
												"login"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Retrieving self Customer data.",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f0abc98f-f747-40ea-82be-06224ad534ea",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token_customer}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"description": "Value: Bearer {jwt}",
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/customer/customer",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"customer",
										"customer"
									]
								},
								"description": "Retrieving self Customer data."
							},
							"response": [
								{
									"name": "Customer self information",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/customer/customer",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"customer",
												"customer"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Invalid input",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/customer/customer",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"customer",
												"customer"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Uploading Customer image file. Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d033f7cf-0dc5-47da-ac27-da145fbfdf83",
										"exec": [
											"pm.environment.set(\"uuidImageCustomer\", pm.response.json().data.item.uuid);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token_customer}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "/D:/ProjecTs/Pharma/IMG Pharma/main_frederic.jpg"
										}
									],
									"options": {
										"formdata": {}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/customer/image",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"customer",
										"image"
									]
								}
							},
							"response": []
						},
						{
							"name": "Updating Customer data.",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "94f6e08c-da59-4d15-971c-0d325d4cb20c",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token_customer}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"description": "Value: Bearer {jwt}",
										"key": "Authorization",
										"value": ""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"name\": \"{{$randomFullName}}\",\n    \"email\": \"{{$randomEmail}}\",\n    \"avatarUuid\":\"{{uuidImageCustomer}}\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/customer/customer",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"customer",
										"customer"
									]
								},
								"description": "Updating Customer data."
							},
							"response": [
								{
									"name": "Invalid input",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"email\": \"<string>\",\n    \"avatarUuid\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/customer/customer",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"customer",
												"customer"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Customer edit self information",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"email\": \"<string>\",\n    \"avatarUuid\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/customer/customer",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"customer",
												"customer"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Retrieving Customer data by uuid.",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "12b32889-b55b-4740-96c7-813624960c17",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token_customer}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"description": "Value: Bearer {jwt}",
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/customer/customer/:uuid",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"customer",
										"customer",
										":uuid"
									],
									"variable": [
										{
											"id": "8649b59d-1d3a-4995-82d8-c2c5c91c59fd",
											"key": "uuid",
											"value": "{{uuid_customer}}",
											"type": "string",
											"description": "(Required) customer uuid"
										}
									]
								},
								"description": "Retrieving Customer data by uuid."
							},
							"response": [
								{
									"name": "Invalid input",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/customer/customer/:uuid",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"customer",
												"customer",
												":uuid"
											],
											"variable": [
												{
													"key": "uuid"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Customer information",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/customer/customer/:uuid",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"customer",
												"customer",
												":uuid"
											],
											"variable": [
												{
													"key": "uuid"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Not found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/customer/customer/:uuid",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"customer",
												"customer",
												":uuid"
											],
											"variable": [
												{
													"key": "uuid"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Updating Customer region.",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token_customer}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"regionId\": 8\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/customer/customer/region",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"customer",
										"customer",
										"region"
									]
								}
							},
							"response": []
						},
						{
							"name": "Retrieving self Customer data. Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3941f48f-7c4c-4eec-b5a7-b059699d507f",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Compare uuid avatar\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data.item.avatar.uuid).to.eql(pm.environment.get(\"uuidImageCustomer\"));\r",
											"});\r",
											"pm.test(\"Compare uuid customer\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data.item.uuid).to.eql(pm.environment.get(\"uuid_customer\"));\r",
											"});\r",
											"pm.test(\"Compare phone customer\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data.item.phone).to.eql(pm.environment.get(\"phone_customer\"));\r",
											"});\r",
											"pm.test(\"Compare region\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.data.item.region.id).to.eql(8);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token_customer}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"description": "Value: Bearer {jwt}",
										"key": "Authorization",
										"value": "",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/customer/customer",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"customer",
										"customer"
									]
								},
								"description": "Retrieving self Customer data."
							},
							"response": [
								{
									"name": "Invalid input",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/customer/customer",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"customer",
												"customer"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Customer self information",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/customer/customer",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"customer",
												"customer"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Customer logout.",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8f7fc30a-6a15-4afc-8264-b74fa78092d3",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token_customer}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"description": "Value: Bearer {jwt}",
										"key": "Authorization",
										"value": ""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"refreshToken\": \"{{refreshToken_customer}}\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/customer/logout",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"customer",
										"logout"
									]
								},
								"description": "Customer logout."
							},
							"response": [
								{
									"name": "Returns if request parameters is not valid",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/customer/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"customer",
												"logout"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Returns if authentication failing",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/customer/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"customer",
												"logout"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Customer logout",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/customer/logout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"customer",
												"logout"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Test pharmacy-product/{id}",
					"item": [
						{
							"name": "Picture",
							"item": [
								{
									"name": "Uploading_User_image_file.",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "04a8e99a-c1a6-4dfb-8674-afd490e49b4e",
												"exec": [
													"pm.environment.set(\"pharmacyImage1\", pm.response.json().data.item.uuid);\r",
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token_user}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "file",
													"type": "file",
													"src": "/D:/ProjecTs/Pharma/IMG Pharma/Без названия (31).jpg"
												},
												{
													"key": "",
													"value": "",
													"type": "text",
													"disabled": true
												}
											],
											"options": {
												"formdata": {}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/user/image",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"user",
												"image"
											]
										}
									},
									"response": []
								},
								{
									"name": "Uploading User image file. 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "168dc11c-1b85-4f90-a010-e8c03b941b5d",
												"exec": [
													"pm.environment.set(\"pharmacyImage2\", pm.response.json().data.item.uuid);\r",
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token_user}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "file",
													"type": "file",
													"src": "/D:/ProjecTs/Pharma/IMG Pharma/Без названия (30).jpg"
												}
											],
											"options": {
												"formdata": {}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/user/image",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"user",
												"image"
											]
										}
									},
									"response": []
								},
								{
									"name": "Uploading User image file. 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "27d3b80c-43f1-41f6-add0-ca1f12364af0",
												"exec": [
													"pm.environment.set(\"pharmacyImage3\", pm.response.json().data.item.uuid);\r",
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token_user}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "file",
													"type": "file",
													"src": "/D:/ProjecTs/Pharma/IMG Pharma/Без названия (32).jpg"
												}
											],
											"options": {
												"formdata": {}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/user/image",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"user",
												"image"
											]
										}
									},
									"response": []
								},
								{
									"name": "Uploading User image file. 4",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "27cf65ee-c829-4d02-ac27-6195262fe8a6",
												"exec": [
													"pm.environment.set(\"pharmacyImage4\", pm.response.json().data.item.uuid);\r",
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token_user}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "file",
													"type": "file",
													"src": "/D:/ProjecTs/Pharma/IMG Pharma/Без названия (33).jpg"
												}
											],
											"options": {
												"formdata": {}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/user/image",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"user",
												"image"
											]
										}
									},
									"response": []
								},
								{
									"name": "Uploading User image file. 5",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "576036e8-c89c-4d92-8d50-68ad6e91362d",
												"exec": [
													"pm.environment.set(\"pharmacyImage5\", pm.response.json().data.item.uuid);\r",
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token_user}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "file",
													"type": "file",
													"src": "/D:/ProjecTs/Pharma/IMG Pharma/Без названия (34).jpg"
												}
											],
											"options": {
												"formdata": {}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/user/image",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"user",
												"image"
											]
										}
									},
									"response": []
								},
								{
									"name": "Creating Pharmacy product.",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "b745039f-a0f1-4291-b250-6315cd3227e3",
												"exec": [
													"//postman.setNextRequest(\"Uploading_User_image_file.\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "2cb1a7ba-a502-4480-bc3c-98a908430777",
												"exec": [
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"pm.environment.set(\"pharmacyPrId\", pm.response.json().data.item.id);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token_user}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"globalProductId\": 749,\r\n  \"price\": 61.321166,\r\n  \"count\": 14,\r\n  \"isEnabled\": true,\r\n  \"isApproved\": true, \r\n  \"rusName\": \"ДЕПАКИН<SUP>&reg;</SUP> ХРОНО\",\r\n  \"engName\": \"\",\r\n  \"releaseForm\": \"таб. пролонгир. действия, покр. оболочкой, 300 мг: 100 шт.\",\r\n  \"registrationDate\": \"2012-03-29T00:00:00+03:00\",\r\n  \"registrationNumber\": \"П N013004/01\",\r\n  \"description\": \"test\",\r\n  \"categoryAtcCode\": \"N03AG01\",\r\n  \"fgtCode\": \"02.011\",\r\n  \"pictureUuids\": [\r\n    \"{{pharmacyImage1}}\",\r\n    \"{{pharmacyImage2}}\",\r\n    \"{{pharmacyImage3}}\",\r\n    \"{{pharmacyImage4}}\",\r\n    \"{{pharmacyImage5}}\"\r\n  ],\r\n  \"barCodes\": [\r\n    \"3587789658406\"\r\n  ],\r\n  \"activeSubstances\": [\r\n    \"valproic acid\"\r\n  ],\r\n  \"kfgCodes\": [\r\n    \"02.05.05\"\r\n  ],\r\n  \"nozologyCodes\": [\r\n    \"B15\"\r\n  ],\r\n  \"manufacturerName\": \"SANOFI WINTHROP INDUSTRIE\",\r\n  \"manufacturerCountry\": 4,\r\n  \"rusNameIsCustom\": true,\r\n  \"engNameIsCustom\": true,\r\n  \"barCodesIsCustom\": true,\r\n  \"activeSubstancesIsCustom\": true,\r\n  \"nozologiesIsCustom\": true,\r\n  \"kfgsIsCustom\": true,\r\n  \"releaseFormIsCustom\": true,\r\n  \"registrationDateIsCustom\": true,\r\n  \"registrationNumberIsCustom\": true,\r\n  \"descriptionIsCustom\": true,\r\n  \"categoryIsCustom\": true,\r\n  \"fgtIsCustom\": true,\r\n  \"picturesIsCustom\": true,\r\n  \"manufacturerIsCustom\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/v1/user/pharmacy/:id/pharmacy-product",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"user",
												"pharmacy",
												":id",
												"pharmacy-product"
											],
											"variable": [
												{
													"id": "e50d6423-55ba-4f1d-a4d5-ff0e399395c0",
													"key": "id",
													"value": "{{PharmaIdCr}}",
													"type": "string"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Creating Pharmacy product.",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "44676a45-8511-434d-8143-6922cb73630d",
										"exec": [
											"//postman.setNextRequest(\"Uploading_User_image_file.\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "0b9ce9dc-e72c-4a8d-961c-a676a0b3f122",
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"pm.environment.set(\"pharmacyPrId\", pm.response.json().data.item.id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token_user}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"globalProductId\": 749,\r\n  \"price\": 61.321166,\r\n  \"count\": 14,\r\n  \"isEnabled\": true,\r\n  \"isApproved\": true, \r\n  \"rusName\": \"ДЕПАКИН<SUP>&reg;</SUP> ХРОНО\",\r\n  \"engName\": \"\",\r\n  \"releaseForm\": \"таб. пролонгир. действия, покр. оболочкой, 300 мг: 100 шт.\",\r\n  \"registrationDate\": \"2012-03-29T00:00:00+03:00\",\r\n  \"registrationNumber\": \"П N013004/01\",\r\n  \"description\": \"test\",\r\n  \"categoryAtcCode\": \"N03AG01\",\r\n  \"fgtCode\": \"02.011\",\r\n  \"pictureUuids\": [\r\n    \"{{pharmacyImage1}}\",\r\n    \"{{pharmacyImage2}}\",\r\n    \"{{pharmacyImage3}}\",\r\n    \"{{pharmacyImage4}}\",\r\n    \"{{pharmacyImage5}}\"\r\n  ],\r\n  \"barCodes\": [\r\n    \"3587789658406\"\r\n  ],\r\n  \"activeSubstances\": [\r\n    \"valproic acid\"\r\n  ],\r\n  \"kfgCodes\": [\r\n    \"02.05.05\"\r\n  ],\r\n  \"nozologyCodes\": [\r\n    \"B15\"\r\n  ],\r\n  \"manufacturerName\": \"SANOFI WINTHROP INDUSTRIE\",\r\n  \"manufacturerCountry\": 4,\r\n  \"rusNameIsCustom\": true,\r\n  \"engNameIsCustom\": true,\r\n  \"barCodesIsCustom\": true,\r\n  \"activeSubstancesIsCustom\": true,\r\n  \"nozologiesIsCustom\": true,\r\n  \"kfgsIsCustom\": true,\r\n  \"releaseFormIsCustom\": true,\r\n  \"registrationDateIsCustom\": true,\r\n  \"registrationNumberIsCustom\": true,\r\n  \"descriptionIsCustom\": true,\r\n  \"categoryIsCustom\": true,\r\n  \"fgtIsCustom\": true,\r\n  \"picturesIsCustom\": true,\r\n  \"manufacturerIsCustom\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/user/pharmacy/:id/pharmacy-product",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"user",
										"pharmacy",
										":id",
										"pharmacy-product"
									],
									"variable": [
										{
											"id": "03df164d-38d9-47e1-be36-762a24925083",
											"key": "id",
											"value": "{{PharmaIdCr}}",
											"type": "string"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Creating Pharmacy product. NULL",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a850f8f0-154f-4654-b27b-2416aa4cb943",
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.environment.set(\"pharmacyPrIdNullFull\", pm.response.json().data.item.id);\r",
											"pm.environment.set(\"pharmacyGlPrIdNullFull\", pm.response.json().data.item.globalProduct.id);\r",
											"console.log(pm.environment.get(\"pharmacyPrIdNullFull\", ));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token_user}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"globalProductId\": null,\r\n  \"price\": 693.151551511598,\r\n  \"count\": 14,\r\n  \"isEnabled\": true,\r\n  \"isApproved\": true,\r\n  \"rusName\": \"ДЕПАКИН<SUP>&reg;</SUP> ХРОНО\",\r\n  \"engName\": \"DEPAKINE<SUP>&reg;</SUP> CHRONO\",\r\n  \"releaseForm\": \"таб. пролонгир. действия, покр. оболочкой, 300 мг: 100 шт.\",\r\n  \"registrationDate\": \"2012-03-29T00:00:00+03:00\",\r\n  \"registrationNumber\": \"П N013004/01\",\r\n  \"description\": \"test\",\r\n  \"categoryAtcCode\": \"N03AG01\",\r\n  \"fgtCode\": \"02.011\",\r\n  \"pictureUuids\": [\r\n    \"{{pharmacyImage1}}\",\r\n    \"{{pharmacyImage2}}\",\r\n    \"{{pharmacyImage3}}\",\r\n    \"{{pharmacyImage4}}\",\r\n    \"{{pharmacyImage5}}\"\r\n    ],\r\n  \"barCodes\": [\r\n    \"3587789658439\"\r\n  ],\r\n  \"activeSubstances\": [\r\n    \"valproic acid\"\r\n  ],\r\n  \"kfgCodes\": [\r\n    \"02.05.05\"\r\n  ],\r\n  \"nozologyCodes\": [\r\n    \"B15\"\r\n  ],\r\n  \"manufacturerName\": \"SANOFI WINTHROP INDUSTRIE\",\r\n  \"manufacturerCountry\": 9,\r\n  \"rusNameIsCustom\": true,\r\n  \"engNameIsCustom\": true,\r\n  \"barCodesIsCustom\": true,\r\n  \"activeSubstancesIsCustom\": true,\r\n  \"nozologiesIsCustom\": true,\r\n  \"kfgsIsCustom\": true,\r\n  \"releaseFormIsCustom\": true,\r\n  \"registrationDateIsCustom\": true,\r\n  \"registrationNumberIsCustom\": true,\r\n  \"descriptionIsCustom\": true,\r\n  \"categoryIsCustom\": true,\r\n  \"fgtIsCustom\": true,\r\n  \"picturesIsCustom\": true,\r\n  \"manufacturerIsCustom\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/v1/user/pharmacy/:id/pharmacy-product",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"user",
										"pharmacy",
										":id",
										"pharmacy-product"
									],
									"variable": [
										{
											"id": "bb4773f4-945a-4b5d-b704-a20c2322ddda",
											"key": "id",
											"value": "{{PharmaIdCr}}",
											"type": "string"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Disable Pharmacy product.",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "008d0c18-0b06-413f-b065-36290f15c8f1",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token_user}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"description": "Value: Bearer {jwt}",
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/v1/user/pharmacy-product/:id/disable",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"v1",
										"user",
										"pharmacy-product",
										":id",
										"disable"
									],
									"variable": [
										{
											"id": "eacbe1e4-c775-446f-b28e-889110750206",
											"key": "id",
											"value": "{{pharmacyPrIdNullFull}}",
											"type": "string",
											"description": "(Required) Pharmacy product id"
										}
									]
								},
								"description": "Disable Pharmacy product."
							},
							"response": [
								{
									"name": "Not found",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/user/pharmacy-product/:id/disable",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"user",
												"pharmacy-product",
												":id",
												"disable"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Invalid input",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/user/pharmacy-product/:id/disable",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"user",
												"pharmacy-product",
												":id",
												"disable"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Pharmacy disabled",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/v1/user/pharmacy-product/:id/disable",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"v1",
												"user",
												"pharmacy-product",
												":id",
												"disable"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "*/*"
										}
									],
									"cookie": [],
									"body": ""
								}
							]
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"variable": [
		{
			"id": "baseUrl",
			"key": "baseUrl",
			"value": "//api.pharmacies.release.fmc-dev.com",
			"type": "string"
		}
	],
	"protocolProfileBehavior": {}
}